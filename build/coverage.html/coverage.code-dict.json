{"/home/travis/build/npmtest/node-npmtest-knex/test.js":"/* istanbul instrument in package npmtest_knex */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireExampleJsFromReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-knex/lib.npmtest_knex.js":"/* istanbul instrument in package npmtest_knex */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_knex = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_knex = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-knex/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-knex && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_knex */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_knex\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught.stack);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_knex.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        local.assetsDict['/assets.npmtest_knex.rollup.js'] =\n            local.assetsDict['/assets.npmtest_knex.rollup.js'] ||\n            local.fs.readFileSync(\n                // buildCustomOrg-hack\n                local.npmtest_knex.__dirname +\n                    '/lib.npmtest_knex.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-knex/knex/knex.js":"// Knex.js\n// --------------\n//     (c) 2013-present Tim Griesser\n//     Knex may be freely distributed under the MIT license.\n//     For details and documentation:\n//     http://knexjs.org\n\nmodule.exports = require('./lib/index');\n","/home/travis/build/npmtest/node-npmtest-knex/knex/lib/index.js":"'use strict';\n\nexports.__esModule = true;\n\nvar _defineProperties = require('babel-runtime/core-js/object/define-properties');\n\nvar _defineProperties2 = _interopRequireDefault(_defineProperties);\n\nvar _assign2 = require('lodash/assign');\n\nvar _assign3 = _interopRequireDefault(_assign2);\n\nexports.default = Knex;\n\nvar _raw = require('./raw');\n\nvar _raw2 = _interopRequireDefault(_raw);\n\nvar _helpers = require('./helpers');\n\nvar _client = require('./client');\n\nvar _client2 = _interopRequireDefault(_client);\n\nvar _makeKnex = require('./util/make-knex');\n\nvar _makeKnex2 = _interopRequireDefault(_makeKnex);\n\nvar _parseConnection = require('./util/parse-connection');\n\nvar _parseConnection2 = _interopRequireDefault(_parseConnection);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n// The client names we'll allow in the `{name: lib}` pairing.\nvar aliases = {\n  'mariadb': 'maria',\n  'mariasql': 'maria',\n  'pg': 'postgres',\n  'postgresql': 'postgres',\n  'sqlite': 'sqlite3'\n};\n\nfunction Knex(config) {\n  if (typeof config === 'string') {\n    return new Knex((0, _assign3.default)((0, _parseConnection2.default)(config), arguments[2]));\n  }\n  var Dialect = void 0;\n  if (arguments.length === 0 || !config.client && !config.dialect) {\n    Dialect = _client2.default;\n  } else if (typeof config.client === 'function' && config.client.prototype instanceof _client2.default) {\n    Dialect = config.client;\n  } else {\n    var clientName = config.client || config.dialect;\n    Dialect = require('./dialects/' + (aliases[clientName] || clientName) + '/index.js');\n  }\n  if (typeof config.connection === 'string') {\n    config = (0, _assign3.default)({}, config, { connection: (0, _parseConnection2.default)(config.connection).connection });\n  }\n  return (0, _makeKnex2.default)(new Dialect(config));\n}\n\n// Expose Client on the main Knex namespace.\nKnex.Client = _client2.default;\n\n(0, _defineProperties2.default)(Knex, {\n  VERSION: {\n    get: function get() {\n      (0, _helpers.warn)('Knex.VERSION is deprecated, you can get the module version' + \"by running require('knex/package').version\");\n      return '0.12.6';\n    }\n  },\n  Promise: {\n    get: function get() {\n      (0, _helpers.warn)('Knex.Promise is deprecated, either require bluebird or use the global Promise');\n      return require('bluebird');\n    }\n  }\n});\n\n// Run a \"raw\" query, though we can't do anything with it other than put\n// it in a query statement.\nKnex.raw = function (sql, bindings) {\n  (0, _helpers.warn)('global Knex.raw is deprecated, use knex.raw (chain off an initialized knex object)');\n  return new _raw2.default().set(sql, bindings);\n};\n\n// Doing this ensures Browserify works. Still need to figure out\n// the best way to do some of this.\nif (process.browser) {\n  require('./dialects/websql/index.js');\n}\nmodule.exports = exports['default'];","/home/travis/build/npmtest/node-npmtest-knex/knex/lib/raw.js":"'use strict';\n\nexports.__esModule = true;\n\nvar _isNumber2 = require('lodash/isNumber');\n\nvar _isNumber3 = _interopRequireDefault(_isNumber2);\n\nvar _isUndefined2 = require('lodash/isUndefined');\n\nvar _isUndefined3 = _interopRequireDefault(_isUndefined2);\n\nvar _isObject2 = require('lodash/isObject');\n\nvar _isObject3 = _interopRequireDefault(_isObject2);\n\nvar _isPlainObject2 = require('lodash/isPlainObject');\n\nvar _isPlainObject3 = _interopRequireDefault(_isPlainObject2);\n\nvar _reduce2 = require('lodash/reduce');\n\nvar _reduce3 = _interopRequireDefault(_reduce2);\n\nvar _assign2 = require('lodash/assign');\n\nvar _assign3 = _interopRequireDefault(_assign2);\n\nvar _inherits = require('inherits');\n\nvar _inherits2 = _interopRequireDefault(_inherits);\n\nvar _helpers = require('./helpers');\n\nvar helpers = _interopRequireWildcard(_helpers);\n\nvar _events = require('events');\n\nvar _debug = require('debug');\n\nvar _debug2 = _interopRequireDefault(_debug);\n\nvar _formatter = require('./formatter');\n\nvar _formatter2 = _interopRequireDefault(_formatter);\n\nvar _uuid = require('uuid');\n\nvar _uuid2 = _interopRequireDefault(_uuid);\n\nfunction _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n// Raw\n// -------\nvar debugBindings = (0, _debug2.default)('knex:bindings');\n\nvar fakeClient = {\n  formatter: function formatter() {\n    return new _formatter2.default(fakeClient);\n  }\n};\n\nfunction Raw() {\n  var client = arguments.length <= 0 || arguments[0] === undefined ? fakeClient : arguments[0];\n\n  this.client = client;\n\n  this.sql = '';\n  this.bindings = [];\n\n  // Todo: Deprecate\n  this._wrappedBefore = undefined;\n  this._wrappedAfter = undefined;\n  this._debug = client && client.config && client.config.debug;\n}\n(0, _inherits2.default)(Raw, _events.EventEmitter);\n\n(0, _assign3.default)(Raw.prototype, {\n  set: function set(sql, bindings) {\n    this.sql = sql;\n    this.bindings = (0, _isObject3.default)(bindings) && !bindings.toSQL || (0, _isUndefined3.default)(bindings) ? bindings : [bindings];\n\n    return this;\n  },\n  timeout: function timeout(ms) {\n    var _ref = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];\n\n    var cancel = _ref.cancel;\n\n    if ((0, _isNumber3.default)(ms) && ms > 0) {\n      this._timeout = ms;\n      if (cancel) {\n        this.client.assertCanCancelQuery();\n        this._cancelOnTimeout = true;\n      }\n    }\n    return this;\n  },\n\n\n  // Wraps the current sql with `before` and `after`.\n  wrap: function wrap(before, after) {\n    this._wrappedBefore = before;\n    this._wrappedAfter = after;\n    return this;\n  },\n\n\n  // Calls `toString` on the Knex object.\n  toString: function toString() {\n    return this.toQuery();\n  },\n\n\n  // Returns the raw sql for the query.\n  toSQL: function toSQL(method, tz) {\n    var obj = void 0;\n    var formatter = this.client.formatter();\n\n    if (Array.isArray(this.bindings)) {\n      obj = replaceRawArrBindings(this, formatter);\n    } else if (this.bindings && (0, _isPlainObject3.default)(this.bindings)) {\n      obj = replaceKeyBindings(this, formatter);\n    } else {\n      obj = {\n        method: 'raw',\n        sql: this.sql,\n        bindings: (0, _isUndefined3.default)(this.bindings) ? [] : [this.bindings]\n      };\n    }\n\n    if (this._wrappedBefore) {\n      obj.sql = this._wrappedBefore + obj.sql;\n    }\n    if (this._wrappedAfter) {\n      obj.sql = obj.sql + this._wrappedAfter;\n    }\n\n    obj.options = (0, _reduce3.default)(this._options, _assign3.default, {});\n\n    if (this._timeout) {\n      obj.timeout = this._timeout;\n      if (this._cancelOnTimeout) {\n        obj.cancelOnTimeout = this._cancelOnTimeout;\n      }\n    }\n\n    obj.bindings = obj.bindings || [];\n    if (helpers.containsUndefined(obj.bindings)) {\n      debugBindings(obj.bindings);\n      throw new Error('Undefined binding(s) detected when compiling RAW query: ' + obj.sql);\n    }\n\n    obj.__knexQueryUid = _uuid2.default.v4();\n\n    return obj;\n  }\n});\n\nfunction replaceRawArrBindings(raw, formatter) {\n  var expectedBindings = raw.bindings.length;\n  var values = raw.bindings;\n  var index = 0;\n\n  var sql = raw.sql.replace(/\\\\?\\?\\??/g, function (match) {\n    if (match === '\\\\?') {\n      return match;\n    }\n\n    var value = values[index++];\n\n    if (match === '??') {\n      return formatter.columnize(value);\n    }\n    return formatter.parameter(value);\n  });\n\n  if (expectedBindings !== index) {\n    throw new Error('Expected ' + expectedBindings + ' bindings, saw ' + index);\n  }\n\n  return {\n    method: 'raw',\n    sql: sql,\n    bindings: formatter.bindings\n  };\n}\n\nfunction replaceKeyBindings(raw, formatter) {\n  var values = raw.bindings;\n\n  var sql = raw.sql;\n\n\n  var regex = /\\\\?(:(\\w+):(?=::)|:(\\w+):(?!:)|:(\\w+))/g;\n  sql = raw.sql.replace(regex, function (match, p1, p2, p3, p4) {\n    if (match !== p1) {\n      return p1;\n    }\n\n    var part = p2 || p3 || p4;\n    var key = match.trim();\n    var isIdentifier = key[key.length - 1] === ':';\n    var value = values[part];\n\n    if (value === undefined) {\n      if (values.hasOwnProperty(part)) {\n        formatter.bindings.push(value);\n      }\n\n      return match;\n    }\n\n    if (isIdentifier) {\n      return match.replace(p1, formatter.columnize(value));\n    }\n\n    return match.replace(p1, formatter.parameter(value));\n  });\n\n  return {\n    method: 'raw',\n    sql: sql,\n    bindings: formatter.bindings\n  };\n}\n\n// Allow the `Raw` object to be utilized with full access to the relevant\n// promise API.\nrequire('./interface')(Raw);\n\nexports.default = Raw;\nmodule.exports = exports['default'];","/home/travis/build/npmtest/node-npmtest-knex/knex/lib/helpers.js":"'use strict';\n\nexports.__esModule = true;\n\nvar _isTypedArray2 = require('lodash/isTypedArray');\n\nvar _isTypedArray3 = _interopRequireDefault(_isTypedArray2);\n\nvar _isArray2 = require('lodash/isArray');\n\nvar _isArray3 = _interopRequireDefault(_isArray2);\n\nvar _isObject2 = require('lodash/isObject');\n\nvar _isObject3 = _interopRequireDefault(_isObject2);\n\nvar _isUndefined2 = require('lodash/isUndefined');\n\nvar _isUndefined3 = _interopRequireDefault(_isUndefined2);\n\nvar _isFunction2 = require('lodash/isFunction');\n\nvar _isFunction3 = _interopRequireDefault(_isFunction2);\n\nvar _keys2 = require('lodash/keys');\n\nvar _keys3 = _interopRequireDefault(_keys2);\n\nvar _pick2 = require('lodash/pick');\n\nvar _pick3 = _interopRequireDefault(_pick2);\n\nvar _map2 = require('lodash/map');\n\nvar _map3 = _interopRequireDefault(_map2);\n\nexports.skim = skim;\nexports.normalizeArr = normalizeArr;\nexports.debugLog = debugLog;\nexports.error = error;\nexports.deprecate = deprecate;\nexports.warn = warn;\nexports.exit = exit;\nexports.containsUndefined = containsUndefined;\n\nvar _chalk = require('chalk');\n\nvar _chalk2 = _interopRequireDefault(_chalk);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n// Pick off the attributes from only the current layer of the object.\nfunction skim(data) {\n  return (0, _map3.default)(data, function (obj) {\n    return (0, _pick3.default)(obj, (0, _keys3.default)(obj));\n  });\n}\n\n// Check if the first argument is an array, otherwise uses all arguments as an\n// array.\n/* eslint no-console:0 */\n\nfunction normalizeArr() {\n  var args = new Array(arguments.length);\n  for (var i = 0; i < args.length; i++) {\n    args[i] = arguments[i];\n  }\n  if (Array.isArray(args[0])) {\n    return args[0];\n  }\n  return args;\n}\n\nfunction debugLog(msg) {\n  console.log(msg);\n}\n\nfunction error(msg) {\n  console.log(_chalk2.default.red('Knex:Error ' + msg));\n}\n\n// Used to signify deprecated functionality.\nfunction deprecate(method, alternate) {\n  warn(method + ' is deprecated, please use ' + alternate);\n}\n\n// Used to warn about incorrect use, without error'ing\nfunction warn(msg) {\n  console.log(_chalk2.default.yellow('Knex:warning - ' + msg));\n}\n\nfunction exit(msg) {\n  console.log(_chalk2.default.red(msg));\n  process.exit(1);\n}\n\nfunction containsUndefined(mixed) {\n  var argContainsUndefined = false;\n\n  if ((0, _isTypedArray3.default)(mixed)) return false;\n\n  if (mixed && (0, _isFunction3.default)(mixed.toSQL)) {\n    //Any QueryBuilder or Raw will automatically be validated during compile.\n    return argContainsUndefined;\n  }\n\n  if ((0, _isArray3.default)(mixed)) {\n    for (var i = 0; i < mixed.length; i++) {\n      if (argContainsUndefined) break;\n      argContainsUndefined = this.containsUndefined(mixed[i]);\n    }\n  } else if ((0, _isObject3.default)(mixed)) {\n    for (var key in mixed) {\n      if (argContainsUndefined) break;\n      argContainsUndefined = this.containsUndefined(mixed[key]);\n    }\n  } else {\n    argContainsUndefined = (0, _isUndefined3.default)(mixed);\n  }\n\n  return argContainsUndefined;\n}","/home/travis/build/npmtest/node-npmtest-knex/knex/lib/formatter.js":"'use strict';\n\nexports.__esModule = true;\n\nvar _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');\n\nvar _classCallCheck3 = _interopRequireDefault(_classCallCheck2);\n\nvar _transform2 = require('lodash/transform');\n\nvar _transform3 = _interopRequireDefault(_transform2);\n\nvar _builder = require('./query/builder');\n\nvar _builder2 = _interopRequireDefault(_builder);\n\nvar _raw = require('./raw');\n\nvar _raw2 = _interopRequireDefault(_raw);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n// Valid values for the `order by` clause generation.\nvar orderBys = ['asc', 'desc'];\n\n// Turn this into a lookup map\nvar operators = (0, _transform3.default)(['=', '<', '>', '<=', '>=', '<>', '!=', 'like', 'not like', 'between', 'ilike', '&', '|', '^', '<<', '>>', 'rlike', 'regexp', 'not regexp', '~', '~*', '!~', '!~*', '#', '&&', '@>', '<@', '||'], function (result, key) {\n  result[key] = true;\n}, {});\n\nvar Formatter = function () {\n  function Formatter(client) {\n    (0, _classCallCheck3.default)(this, Formatter);\n\n    this.client = client;\n    this.bindings = [];\n  }\n\n  // Accepts a string or array of columns to wrap as appropriate.\n\n\n  Formatter.prototype.columnize = function columnize(target) {\n    var columns = typeof target === 'string' ? [target] : target;\n    var str = '',\n        i = -1;\n    while (++i < columns.length) {\n      if (i > 0) str += ', ';\n      str += this.wrap(columns[i]);\n    }\n    return str;\n  };\n\n  // Turns a list of values into a list of ?'s, joining them with commas unless\n  // a \"joining\" value is specified (e.g. ' and ')\n\n\n  Formatter.prototype.parameterize = function parameterize(values, notSetValue) {\n    if (typeof values === 'function') return this.parameter(values);\n    values = Array.isArray(values) ? values : [values];\n    var str = '',\n        i = -1;\n    while (++i < values.length) {\n      if (i > 0) str += ', ';\n      str += this.parameter(values[i] === undefined ? notSetValue : values[i]);\n    }\n    return str;\n  };\n\n  // Checks whether a value is a function... if it is, we compile it\n  // otherwise we check whether it's a raw\n\n\n  Formatter.prototype.parameter = function parameter(value) {\n    if (typeof value === 'function') {\n      return this.outputQuery(this.compileCallback(value), true);\n    }\n    return this.unwrapRaw(value, true) || '?';\n  };\n\n  Formatter.prototype.unwrapRaw = function unwrapRaw(value, isParameter) {\n    var query = void 0;\n    if (value instanceof _builder2.default) {\n      query = this.client.queryCompiler(value).toSQL();\n      if (query.bindings) {\n        this.bindings = this.bindings.concat(query.bindings);\n      }\n      return this.outputQuery(query, isParameter);\n    }\n    if (value instanceof _raw2.default) {\n      value.client = this.client;\n      query = value.toSQL();\n      if (query.bindings) {\n        this.bindings = this.bindings.concat(query.bindings);\n      }\n      return query.sql;\n    }\n    if (isParameter) {\n      this.bindings.push(value);\n    }\n  };\n\n  Formatter.prototype.rawOrFn = function rawOrFn(value, method) {\n    if (typeof value === 'function') {\n      return this.outputQuery(this.compileCallback(value, method));\n    }\n    return this.unwrapRaw(value) || '';\n  };\n\n  // Puts the appropriate wrapper around a value depending on the database\n  // engine, unless it's a knex.raw value, in which case it's left alone.\n\n\n  Formatter.prototype.wrap = function wrap(value) {\n    if (typeof value === 'function') {\n      return this.outputQuery(this.compileCallback(value), true);\n    }\n    var raw = this.unwrapRaw(value);\n    if (raw) return raw;\n    if (typeof value === 'number') return value;\n    return this._wrapString(value + '');\n  };\n\n  Formatter.prototype.wrapAsIdentifier = function wrapAsIdentifier(value) {\n    return this.client.wrapIdentifier((value || '').trim());\n  };\n\n  Formatter.prototype.alias = function alias(first, second) {\n    return first + ' as ' + second;\n  };\n\n  // The operator method takes a value and returns something or other.\n\n\n  Formatter.prototype.operator = function operator(value) {\n    var raw = this.unwrapRaw(value);\n    if (raw) return raw;\n    if (operators[(value || '').toLowerCase()] !== true) {\n      throw new TypeError('The operator \"' + value + '\" is not permitted');\n    }\n    return value;\n  };\n\n  // Specify the direction of the ordering.\n\n\n  Formatter.prototype.direction = function direction(value) {\n    var raw = this.unwrapRaw(value);\n    if (raw) return raw;\n    return orderBys.indexOf((value || '').toLowerCase()) !== -1 ? value : 'asc';\n  };\n\n  // Compiles a callback using the query builder.\n\n\n  Formatter.prototype.compileCallback = function compileCallback(callback, method) {\n    var client = this.client;\n\n    // Build the callback\n\n    var builder = client.queryBuilder();\n    callback.call(builder, builder);\n\n    // Compile the callback, using the current formatter (to track all bindings).\n    var compiler = client.queryCompiler(builder);\n    compiler.formatter = this;\n\n    // Return the compiled & parameterized sql.\n    return compiler.toSQL(method || 'select');\n  };\n\n  // Ensures the query is aliased if necessary.\n\n\n  Formatter.prototype.outputQuery = function outputQuery(compiled, isParameter) {\n    var sql = compiled.sql || '';\n    if (sql) {\n      if ((compiled.method === 'select' || compiled.method === 'first') && (isParameter || compiled.as)) {\n        sql = '(' + sql + ')';\n        if (compiled.as) return this.alias(sql, this.wrap(compiled.as));\n      }\n    }\n    return sql;\n  };\n\n  // Coerce to string to prevent strange errors when it's not a string.\n\n\n  Formatter.prototype._wrapString = function _wrapString(value) {\n    var asIndex = value.toLowerCase().indexOf(' as ');\n    if (asIndex !== -1) {\n      var first = value.slice(0, asIndex);\n      var second = value.slice(asIndex + 4);\n      return this.alias(this.wrap(first), this.wrapAsIdentifier(second));\n    }\n    var wrapped = [];\n    var i = -1;\n    var segments = value.split('.');\n    while (++i < segments.length) {\n      value = segments[i];\n      if (i === 0 && segments.length > 1) {\n        wrapped.push(this.wrap((value || '').trim()));\n      } else {\n        wrapped.push(this.client.wrapIdentifier((value || '').trim()));\n      }\n    }\n    return wrapped.join('.');\n  };\n\n  return Formatter;\n}();\n\nexports.default = Formatter;\nmodule.exports = exports['default'];","/home/travis/build/npmtest/node-npmtest-knex/knex/lib/query/builder.js":"'use strict';\n\nexports.__esModule = true;\n\nvar _keys = require('babel-runtime/core-js/object/keys');\n\nvar _keys2 = _interopRequireDefault(_keys);\n\nvar _reject2 = require('lodash/reject');\n\nvar _reject3 = _interopRequireDefault(_reject2);\n\nvar _toArray2 = require('lodash/toArray');\n\nvar _toArray3 = _interopRequireDefault(_toArray2);\n\nvar _tail2 = require('lodash/tail');\n\nvar _tail3 = _interopRequireDefault(_tail2);\n\nvar _isUndefined2 = require('lodash/isUndefined');\n\nvar _isUndefined3 = _interopRequireDefault(_isUndefined2);\n\nvar _isString2 = require('lodash/isString');\n\nvar _isString3 = _interopRequireDefault(_isString2);\n\nvar _isObject2 = require('lodash/isObject');\n\nvar _isObject3 = _interopRequireDefault(_isObject2);\n\nvar _isNumber2 = require('lodash/isNumber');\n\nvar _isNumber3 = _interopRequireDefault(_isNumber2);\n\nvar _isFunction2 = require('lodash/isFunction');\n\nvar _isFunction3 = _interopRequireDefault(_isFunction2);\n\nvar _isEmpty2 = require('lodash/isEmpty');\n\nvar _isEmpty3 = _interopRequireDefault(_isEmpty2);\n\nvar _isBoolean2 = require('lodash/isBoolean');\n\nvar _isBoolean3 = _interopRequireDefault(_isBoolean2);\n\nvar _each2 = require('lodash/each');\n\nvar _each3 = _interopRequireDefault(_each2);\n\nvar _clone2 = require('lodash/clone');\n\nvar _clone3 = _interopRequireDefault(_clone2);\n\nvar _assign2 = require('lodash/assign');\n\nvar _assign3 = _interopRequireDefault(_assign2);\n\nvar _assert = require('assert');\n\nvar _assert2 = _interopRequireDefault(_assert);\n\nvar _inherits = require('inherits');\n\nvar _inherits2 = _interopRequireDefault(_inherits);\n\nvar _events = require('events');\n\nvar _raw = require('../raw');\n\nvar _raw2 = _interopRequireDefault(_raw);\n\nvar _helpers = require('../helpers');\n\nvar helpers = _interopRequireWildcard(_helpers);\n\nvar _joinclause = require('./joinclause');\n\nvar _joinclause2 = _interopRequireDefault(_joinclause);\n\nfunction _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n// Typically called from `knex.builder`,\n// start a new query building chain.\n\n// Builder\n// -------\nfunction Builder(client) {\n  this.client = client;\n  this.and = this;\n  this._single = {};\n  this._statements = [];\n  this._method = 'select';\n  this._debug = client.config && client.config.debug;\n\n  // Internal flags used in the builder.\n  this._joinFlag = 'inner';\n  this._boolFlag = 'and';\n  this._notFlag = false;\n}\n(0, _inherits2.default)(Builder, _events.EventEmitter);\n\n(0, _assign3.default)(Builder.prototype, {\n  toString: function toString() {\n    return this.toQuery();\n  },\n\n\n  // Convert the current query \"toSQL\"\n  toSQL: function toSQL(method, tz) {\n    return this.client.queryCompiler(this).toSQL(method || this._method, tz);\n  },\n\n\n  // Create a shallow clone of the current query builder.\n  clone: function clone() {\n    var cloned = new this.constructor(this.client);\n    cloned._method = this._method;\n    cloned._single = (0, _clone3.default)(this._single);\n    cloned._statements = (0, _clone3.default)(this._statements);\n    cloned._debug = this._debug;\n\n    // `_option` is assigned by the `Interface` mixin.\n    if (!(0, _isUndefined3.default)(this._options)) {\n      cloned._options = (0, _clone3.default)(this._options);\n    }\n\n    return cloned;\n  },\n  timeout: function timeout(ms) {\n    var _ref = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];\n\n    var cancel = _ref.cancel;\n\n    if ((0, _isNumber3.default)(ms) && ms > 0) {\n      this._timeout = ms;\n      if (cancel) {\n        this.client.assertCanCancelQuery();\n        this._cancelOnTimeout = true;\n      }\n    }\n    return this;\n  },\n\n\n  // With\n  // ------\n\n  with: function _with(alias, statement, bindings) {\n    if (typeof alias !== 'string') {\n      throw new Error('with() first argument must be a string');\n    }\n    if (typeof statement === 'function') {\n      return this.withWrapped(alias, statement);\n    }\n    // Allow a raw statement to be passed along to the query.\n    if (statement instanceof _raw2.default && arguments.length >= 2) {\n      return this.withRaw(alias, statement, bindings);\n    }\n    throw new Error('with() second argument must be a function or a raw');\n  },\n\n\n  // Adds a raw `with` clause to the query.\n  withRaw: function withRaw(alias, sql, bindings) {\n    var raw = sql instanceof _raw2.default ? sql : this.client.raw(sql, bindings);\n    this._statements.push({\n      grouping: 'with',\n      type: 'withRaw',\n      alias: alias,\n      value: raw\n    });\n    return this;\n  },\n\n\n  // Helper for compiling any advanced `with` queries.\n  withWrapped: function withWrapped(alias, callback) {\n    this._statements.push({\n      grouping: 'with',\n      type: 'withWrapped',\n      alias: alias,\n      value: callback\n    });\n    return this;\n  },\n\n\n  // Select\n  // ------\n\n  // Adds a column or columns to the list of \"columns\"\n  // being selected on the query.\n  columns: function columns(column) {\n    if (!column) return this;\n    this._statements.push({\n      grouping: 'columns',\n      value: helpers.normalizeArr.apply(null, arguments)\n    });\n    return this;\n  },\n\n\n  // Allow for a sub-select to be explicitly aliased as a column,\n  // without needing to compile the query in a where.\n  as: function as(column) {\n    this._single.as = column;\n    return this;\n  },\n\n\n  // Prepends the `schemaName` on `tableName` defined by `.table` and `.join`.\n  withSchema: function withSchema(schemaName) {\n    this._single.schema = schemaName;\n    return this;\n  },\n\n\n  // Sets the `tableName` on the query.\n  // Alias to \"from\" for select and \"into\" for insert statements\n  // e.g. builder.insert({a: value}).into('tableName')\n  // `options`: options object containing keys:\n  //   - `only`: whether the query should use SQL's ONLY to not return\n  //           inheriting table data. Defaults to false.\n  table: function table(tableName) {\n    var options = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];\n\n    this._single.table = tableName;\n    this._single.only = options.only === true;\n    return this;\n  },\n\n\n  // Adds a `distinct` clause to the query.\n  distinct: function distinct() {\n    this._statements.push({\n      grouping: 'columns',\n      value: helpers.normalizeArr.apply(null, arguments),\n      distinct: true\n    });\n    return this;\n  },\n\n\n  // Adds a join clause to the query, allowing for advanced joins\n  // with an anonymous function as the second argument.\n  // function(table, first, operator, second)\n  join: function join(table, first) {\n    var join = void 0;\n    var schema = this._single.schema;\n\n    var joinType = this._joinType();\n    if (typeof first === 'function') {\n      join = new _joinclause2.default(table, joinType, schema);\n      first.call(join, join);\n    } else if (joinType === 'raw') {\n      join = new _joinclause2.default(this.client.raw(table, first), 'raw');\n    } else {\n      join = new _joinclause2.default(table, joinType, schema);\n      if (arguments.length > 1) {\n        join.on.apply(join, (0, _toArray3.default)(arguments).slice(1));\n      }\n    }\n    this._statements.push(join);\n    return this;\n  },\n\n\n  // JOIN blocks:\n  innerJoin: function innerJoin() {\n    return this._joinType('inner').join.apply(this, arguments);\n  },\n  leftJoin: function leftJoin() {\n    return this._joinType('left').join.apply(this, arguments);\n  },\n  leftOuterJoin: function leftOuterJoin() {\n    return this._joinType('left outer').join.apply(this, arguments);\n  },\n  rightJoin: function rightJoin() {\n    return this._joinType('right').join.apply(this, arguments);\n  },\n  rightOuterJoin: function rightOuterJoin() {\n    return this._joinType('right outer').join.apply(this, arguments);\n  },\n  outerJoin: function outerJoin() {\n    return this._joinType('outer').join.apply(this, arguments);\n  },\n  fullOuterJoin: function fullOuterJoin() {\n    return this._joinType('full outer').join.apply(this, arguments);\n  },\n  crossJoin: function crossJoin() {\n    return this._joinType('cross').join.apply(this, arguments);\n  },\n  joinRaw: function joinRaw() {\n    return this._joinType('raw').join.apply(this, arguments);\n  },\n\n\n  // The where function can be used in several ways:\n  // The most basic is `where(key, value)`, which expands to\n  // where key = value.\n  where: function where(column, operator, value) {\n\n    // Support \"where true || where false\"\n    if (column === false || column === true) {\n      return this.where(1, '=', column ? 1 : 0);\n    }\n\n    // Check if the column is a function, in which case it's\n    // a where statement wrapped in parens.\n    if (typeof column === 'function') {\n      return this.whereWrapped(column);\n    }\n\n    // Allow a raw statement to be passed along to the query.\n    if (column instanceof _raw2.default && arguments.length === 1) return this.whereRaw(column);\n\n    // Allows `where({id: 2})` syntax.\n    if ((0, _isObject3.default)(column) && !(column instanceof _raw2.default)) return this._objectWhere(column);\n\n    // Enable the where('key', value) syntax, only when there\n    // are explicitly two arguments passed, so it's not possible to\n    // do where('key', '!=') and have that turn into where key != null\n    if (arguments.length === 2) {\n      value = operator;\n      operator = '=';\n\n      // If the value is null, and it's a two argument query,\n      // we assume we're going for a `whereNull`.\n      if (value === null) {\n        return this.whereNull(column);\n      }\n    }\n\n    // lower case the operator for comparison purposes\n    var checkOperator = ('' + operator).toLowerCase().trim();\n\n    // If there are 3 arguments, check whether 'in' is one of them.\n    if (arguments.length === 3) {\n      if (checkOperator === 'in' || checkOperator === 'not in') {\n        return this._not(checkOperator === 'not in').whereIn(arguments[0], arguments[2]);\n      }\n      if (checkOperator === 'between' || checkOperator === 'not between') {\n        return this._not(checkOperator === 'not between').whereBetween(arguments[0], arguments[2]);\n      }\n    }\n\n    // If the value is still null, check whether they're meaning\n    // where value is null\n    if (value === null) {\n\n      // Check for .where(key, 'is', null) or .where(key, 'is not', 'null');\n      if (checkOperator === 'is' || checkOperator === 'is not') {\n        return this._not(checkOperator === 'is not').whereNull(column);\n      }\n    }\n\n    // Push onto the where statement stack.\n    this._statements.push({\n      grouping: 'where',\n      type: 'whereBasic',\n      column: column,\n      operator: operator,\n      value: value,\n      not: this._not(),\n      bool: this._bool()\n    });\n    return this;\n  },\n\n  // Adds an `or where` clause to the query.\n  orWhere: function orWhere() {\n    this._bool('or');\n    var obj = arguments[0];\n    if ((0, _isObject3.default)(obj) && !(0, _isFunction3.default)(obj) && !(obj instanceof _raw2.default)) {\n      return this.whereWrapped(function () {\n        for (var key in obj) {\n          this.andWhere(key, obj[key]);\n        }\n      });\n    }\n    return this.where.apply(this, arguments);\n  },\n\n  // Adds an `not where` clause to the query.\n  whereNot: function whereNot() {\n    return this._not(true).where.apply(this, arguments);\n  },\n\n\n  // Adds an `or not where` clause to the query.\n  orWhereNot: function orWhereNot() {\n    return this._bool('or').whereNot.apply(this, arguments);\n  },\n\n\n  // Processes an object literal provided in a \"where\" clause.\n  _objectWhere: function _objectWhere(obj) {\n    var boolVal = this._bool();\n    var notVal = this._not() ? 'Not' : '';\n    for (var key in obj) {\n      this[boolVal + 'Where' + notVal](key, obj[key]);\n    }\n    return this;\n  },\n\n\n  // Adds a raw `where` clause to the query.\n  whereRaw: function whereRaw(sql, bindings) {\n    var raw = sql instanceof _raw2.default ? sql : this.client.raw(sql, bindings);\n    this._statements.push({\n      grouping: 'where',\n      type: 'whereRaw',\n      value: raw,\n      not: this._not(),\n      bool: this._bool()\n    });\n    return this;\n  },\n  orWhereRaw: function orWhereRaw(sql, bindings) {\n    return this._bool('or').whereRaw(sql, bindings);\n  },\n\n\n  // Helper for compiling any advanced `where` queries.\n  whereWrapped: function whereWrapped(callback) {\n    this._statements.push({\n      grouping: 'where',\n      type: 'whereWrapped',\n      value: callback,\n      not: this._not(),\n      bool: this._bool()\n    });\n    return this;\n  },\n\n\n  // Adds a `where exists` clause to the query.\n  whereExists: function whereExists(callback) {\n    this._statements.push({\n      grouping: 'where',\n      type: 'whereExists',\n      value: callback,\n      not: this._not(),\n      bool: this._bool()\n    });\n    return this;\n  },\n\n\n  // Adds an `or where exists` clause to the query.\n  orWhereExists: function orWhereExists(callback) {\n    return this._bool('or').whereExists(callback);\n  },\n\n\n  // Adds a `where not exists` clause to the query.\n  whereNotExists: function whereNotExists(callback) {\n    return this._not(true).whereExists(callback);\n  },\n\n\n  // Adds a `or where not exists` clause to the query.\n  orWhereNotExists: function orWhereNotExists(callback) {\n    return this._bool('or').whereNotExists(callback);\n  },\n\n\n  // Adds a `where in` clause to the query.\n  whereIn: function whereIn(column, values) {\n    if (Array.isArray(values) && (0, _isEmpty3.default)(values)) return this.where(this._not());\n    this._statements.push({\n      grouping: 'where',\n      type: 'whereIn',\n      column: column,\n      value: values,\n      not: this._not(),\n      bool: this._bool()\n    });\n    return this;\n  },\n\n\n  // Adds a `or where in` clause to the query.\n  orWhereIn: function orWhereIn(column, values) {\n    return this._bool('or').whereIn(column, values);\n  },\n\n\n  // Adds a `where not in` clause to the query.\n  whereNotIn: function whereNotIn(column, values) {\n    return this._not(true).whereIn(column, values);\n  },\n\n\n  // Adds a `or where not in` clause to the query.\n  orWhereNotIn: function orWhereNotIn(column, values) {\n    return this._bool('or')._not(true).whereIn(column, values);\n  },\n\n\n  // Adds a `where null` clause to the query.\n  whereNull: function whereNull(column) {\n    this._statements.push({\n      grouping: 'where',\n      type: 'whereNull',\n      column: column,\n      not: this._not(),\n      bool: this._bool()\n    });\n    return this;\n  },\n\n\n  // Adds a `or where null` clause to the query.\n  orWhereNull: function orWhereNull(column) {\n    return this._bool('or').whereNull(column);\n  },\n\n\n  // Adds a `where not null` clause to the query.\n  whereNotNull: function whereNotNull(column) {\n    return this._not(true).whereNull(column);\n  },\n\n\n  // Adds a `or where not null` clause to the query.\n  orWhereNotNull: function orWhereNotNull(column) {\n    return this._bool('or').whereNotNull(column);\n  },\n\n\n  // Adds a `where between` clause to the query.\n  whereBetween: function whereBetween(column, values) {\n    (0, _assert2.default)(Array.isArray(values), 'The second argument to whereBetween must be an array.');\n    (0, _assert2.default)(values.length === 2, 'You must specify 2 values for the whereBetween clause');\n    this._statements.push({\n      grouping: 'where',\n      type: 'whereBetween',\n      column: column,\n      value: values,\n      not: this._not(),\n      bool: this._bool()\n    });\n    return this;\n  },\n\n\n  // Adds a `where not between` clause to the query.\n  whereNotBetween: function whereNotBetween(column, values) {\n    return this._not(true).whereBetween(column, values);\n  },\n\n\n  // Adds a `or where between` clause to the query.\n  orWhereBetween: function orWhereBetween(column, values) {\n    return this._bool('or').whereBetween(column, values);\n  },\n\n\n  // Adds a `or where not between` clause to the query.\n  orWhereNotBetween: function orWhereNotBetween(column, values) {\n    return this._bool('or').whereNotBetween(column, values);\n  },\n\n\n  // Adds a `group by` clause to the query.\n  groupBy: function groupBy(item) {\n    if (item instanceof _raw2.default) {\n      return this.groupByRaw.apply(this, arguments);\n    }\n    this._statements.push({\n      grouping: 'group',\n      type: 'groupByBasic',\n      value: helpers.normalizeArr.apply(null, arguments)\n    });\n    return this;\n  },\n\n\n  // Adds a raw `group by` clause to the query.\n  groupByRaw: function groupByRaw(sql, bindings) {\n    var raw = sql instanceof _raw2.default ? sql : this.client.raw(sql, bindings);\n    this._statements.push({\n      grouping: 'group',\n      type: 'groupByRaw',\n      value: raw\n    });\n    return this;\n  },\n\n\n  // Adds a `order by` clause to the query.\n  orderBy: function orderBy(column, direction) {\n    this._statements.push({\n      grouping: 'order',\n      type: 'orderByBasic',\n      value: column,\n      direction: direction\n    });\n    return this;\n  },\n\n\n  // Add a raw `order by` clause to the query.\n  orderByRaw: function orderByRaw(sql, bindings) {\n    var raw = sql instanceof _raw2.default ? sql : this.client.raw(sql, bindings);\n    this._statements.push({\n      grouping: 'order',\n      type: 'orderByRaw',\n      value: raw\n    });\n    return this;\n  },\n\n\n  // Add a union statement to the query.\n  union: function union(callbacks, wrap) {\n    if (arguments.length === 1 || arguments.length === 2 && (0, _isBoolean3.default)(wrap)) {\n      if (!Array.isArray(callbacks)) {\n        callbacks = [callbacks];\n      }\n      for (var i = 0, l = callbacks.length; i < l; i++) {\n        this._statements.push({\n          grouping: 'union',\n          clause: 'union',\n          value: callbacks[i],\n          wrap: wrap || false\n        });\n      }\n    } else {\n      callbacks = (0, _toArray3.default)(arguments).slice(0, arguments.length - 1);\n      wrap = arguments[arguments.length - 1];\n      if (!(0, _isBoolean3.default)(wrap)) {\n        callbacks.push(wrap);\n        wrap = false;\n      }\n      this.union(callbacks, wrap);\n    }\n    return this;\n  },\n\n\n  // Adds a union all statement to the query.\n  unionAll: function unionAll(callback, wrap) {\n    this._statements.push({\n      grouping: 'union',\n      clause: 'union all',\n      value: callback,\n      wrap: wrap || false\n    });\n    return this;\n  },\n\n\n  // Adds a `having` clause to the query.\n  having: function having(column, operator, value) {\n    if (column instanceof _raw2.default && arguments.length === 1) {\n      return this.havingRaw(column);\n    }\n\n    // Check if the column is a function, in which case it's\n    // a having statement wrapped in parens.\n    if (typeof column === 'function') {\n      return this.havingWrapped(column);\n    }\n\n    this._statements.push({\n      grouping: 'having',\n      type: 'havingBasic',\n      column: column,\n      operator: operator,\n      value: value,\n      bool: this._bool(),\n      not: this._not()\n    });\n    return this;\n  },\n\n\n  orHaving: function orHaving() {\n    this._bool('or');\n    var obj = arguments[0];\n    if ((0, _isObject3.default)(obj) && !(0, _isFunction3.default)(obj) && !(obj instanceof _raw2.default)) {\n      return this.havingWrapped(function () {\n        for (var key in obj) {\n          this.andHaving(key, obj[key]);\n        }\n      });\n    }\n    return this.having.apply(this, arguments);\n  },\n\n  // Helper for compiling any advanced `having` queries.\n  havingWrapped: function havingWrapped(callback) {\n    this._statements.push({\n      grouping: 'having',\n      type: 'havingWrapped',\n      value: callback,\n      bool: this._bool(),\n      not: this._not()\n    });\n    return this;\n  },\n  havingNull: function havingNull(column) {\n    this._statements.push({\n      grouping: 'having',\n      type: 'havingNull',\n      column: column,\n      not: this._not(),\n      bool: this._bool()\n    });\n    return this;\n  },\n  orHavingNull: function orHavingNull(callback) {\n    return this._bool('or').havingNull(callback);\n  },\n  havingNotNull: function havingNotNull(callback) {\n    return this._not(true).havingNull(callback);\n  },\n  orHavingNotNull: function orHavingNotNull(callback) {\n    return this._not(true)._bool('or').havingNull(callback);\n  },\n  havingExists: function havingExists(callback) {\n    this._statements.push({\n      grouping: 'having',\n      type: 'havingExists',\n      value: callback,\n      not: this._not(),\n      bool: this._bool()\n    });\n    return this;\n  },\n  orHavingExists: function orHavingExists(callback) {\n    return this._bool('or').havingExists(callback);\n  },\n  havingNotExists: function havingNotExists(callback) {\n    return this._not(true).havingExists(callback);\n  },\n  orHavingNotExists: function orHavingNotExists(callback) {\n    return this._not(true)._bool('or').havingExists(callback);\n  },\n  havingBetween: function havingBetween(column, values) {\n    (0, _assert2.default)(Array.isArray(values), 'The second argument to havingBetween must be an array.');\n    (0, _assert2.default)(values.length === 2, 'You must specify 2 values for the havingBetween clause');\n    this._statements.push({\n      grouping: 'having',\n      type: 'havingBetween',\n      column: column,\n      value: values,\n      not: this._not(),\n      bool: this._bool()\n    });\n    return this;\n  },\n  orHavingBetween: function orHavingBetween(column, values) {\n    return this._bool('or').havingBetween(column, values);\n  },\n  havingNotBetween: function havingNotBetween(column, values) {\n    return this._not(true).havingBetween(column, values);\n  },\n  orHavingNotBetween: function orHavingNotBetween(column, values) {\n    return this._not(true)._bool('or').havingBetween(column, values);\n  },\n  havingIn: function havingIn(column, values) {\n    if (Array.isArray(values) && (0, _isEmpty3.default)(values)) return this.where(this._not());\n    this._statements.push({\n      grouping: 'having',\n      type: 'havingIn',\n      column: column,\n      value: values,\n      not: this._not(),\n      bool: this._bool()\n    });\n    return this;\n  },\n\n\n  // Adds a `or where in` clause to the query.\n  orHavingIn: function orHavingIn(column, values) {\n    return this._bool('or').havingIn(column, values);\n  },\n\n\n  // Adds a `where not in` clause to the query.\n  havingNotIn: function havingNotIn(column, values) {\n    return this._not(true).havingIn(column, values);\n  },\n\n\n  // Adds a `or where not in` clause to the query.\n  orHavingNotIn: function orHavingNotIn(column, values) {\n    return this._bool('or')._not(true).havingIn(column, values);\n  },\n\n\n  // Adds a raw `having` clause to the query.\n  havingRaw: function havingRaw(sql, bindings) {\n    var raw = sql instanceof _raw2.default ? sql : this.client.raw(sql, bindings);\n    this._statements.push({\n      grouping: 'having',\n      type: 'havingRaw',\n      value: raw,\n      bool: this._bool(),\n      not: this._not()\n    });\n    return this;\n  },\n  orHavingRaw: function orHavingRaw(sql, bindings) {\n    return this._bool('or').havingRaw(sql, bindings);\n  },\n\n\n  // Only allow a single \"offset\" to be set for the current query.\n  offset: function offset(value) {\n    this._single.offset = value;\n    return this;\n  },\n\n\n  // Only allow a single \"limit\" to be set for the current query.\n  limit: function limit(value) {\n    var val = parseInt(value, 10);\n    if (isNaN(val)) {\n      helpers.warn('A valid integer must be provided to limit');\n    } else {\n      this._single.limit = val;\n    }\n    return this;\n  },\n\n\n  // Retrieve the \"count\" result of the query.\n  count: function count(column) {\n    return this._aggregate('count', column || '*');\n  },\n\n\n  // Retrieve the minimum value of a given column.\n  min: function min(column) {\n    return this._aggregate('min', column);\n  },\n\n\n  // Retrieve the maximum value of a given column.\n  max: function max(column) {\n    return this._aggregate('max', column);\n  },\n\n\n  // Retrieve the sum of the values of a given column.\n  sum: function sum(column) {\n    return this._aggregate('sum', column);\n  },\n\n\n  // Retrieve the average of the values of a given column.\n  avg: function avg(column) {\n    return this._aggregate('avg', column);\n  },\n\n\n  // Retrieve the \"count\" of the distinct results of the query.\n  countDistinct: function countDistinct(column) {\n    return this._aggregate('count', column || '*', true);\n  },\n\n\n  // Retrieve the sum of the distinct values of a given column.\n  sumDistinct: function sumDistinct(column) {\n    return this._aggregate('sum', column, true);\n  },\n\n\n  // Retrieve the vg of the distinct results of the query.\n  avgDistinct: function avgDistinct(column) {\n    return this._aggregate('avg', column, true);\n  },\n\n\n  // Increments a column's value by the specified amount.\n  increment: function increment(column, amount) {\n    return this._counter(column, amount);\n  },\n\n\n  // Decrements a column's value by the specified amount.\n  decrement: function decrement(column, amount) {\n    return this._counter(column, amount, '-');\n  },\n\n\n  // Sets the values for a `select` query, informing that only the first\n  // row should be returned (limit 1).\n  first: function first() {\n    var args = new Array(arguments.length);\n    for (var i = 0; i < args.length; i++) {\n      args[i] = arguments[i];\n    }\n    this.select.apply(this, args);\n    this._method = 'first';\n    this.limit(1);\n    return this;\n  },\n\n\n  // Pluck a column from a query.\n  pluck: function pluck(column) {\n    this._method = 'pluck';\n    this._single.pluck = column;\n    this._statements.push({\n      grouping: 'columns',\n      type: 'pluck',\n      value: column\n    });\n    return this;\n  },\n\n\n  // Remove everything from select clause\n  clearSelect: function clearSelect() {\n    this._clearGrouping('columns');\n    return this;\n  },\n\n\n  // Remove everything from select clause\n  clearWhere: function clearWhere() {\n    this._clearGrouping('where');\n    return this;\n  },\n\n\n  // Insert & Update\n  // ------\n\n  // Sets the values for an `insert` query.\n  insert: function insert(values, returning) {\n    this._method = 'insert';\n    if (!(0, _isEmpty3.default)(returning)) this.returning(returning);\n    this._single.insert = values;\n    return this;\n  },\n\n\n  // Sets the values for an `update`, allowing for both\n  // `.update(key, value, [returning])` and `.update(obj, [returning])` syntaxes.\n  update: function update(values, returning) {\n    var ret = void 0;\n    var obj = this._single.update || {};\n    this._method = 'update';\n    if ((0, _isString3.default)(values)) {\n      obj[values] = returning;\n      if (arguments.length > 2) {\n        ret = arguments[2];\n      }\n    } else {\n      var keys = (0, _keys2.default)(values);\n      if (this._single.update) {\n        helpers.warn('Update called multiple times with objects.');\n      }\n      var i = -1;\n      while (++i < keys.length) {\n        obj[keys[i]] = values[keys[i]];\n      }\n      ret = arguments[1];\n    }\n    if (!(0, _isEmpty3.default)(ret)) this.returning(ret);\n    this._single.update = obj;\n    return this;\n  },\n\n\n  // Sets the returning value for the query.\n  returning: function returning(_returning) {\n    this._single.returning = _returning;\n    return this;\n  },\n\n\n  // Delete\n  // ------\n\n  // Executes a delete statement on the query;\n  delete: function _delete(ret) {\n    this._method = 'del';\n    if (!(0, _isEmpty3.default)(ret)) this.returning(ret);\n    return this;\n  },\n\n\n  // Truncates a table, ends the query chain.\n  truncate: function truncate(tableName) {\n    this._method = 'truncate';\n    if (tableName) {\n      this._single.table = tableName;\n    }\n    return this;\n  },\n\n\n  // Retrieves columns for the table specified by `knex(tableName)`\n  columnInfo: function columnInfo(column) {\n    this._method = 'columnInfo';\n    this._single.columnInfo = column;\n    return this;\n  },\n\n\n  // Set a lock for update constraint.\n  forUpdate: function forUpdate() {\n    this._single.lock = 'forUpdate';\n    return this;\n  },\n\n\n  // Set a lock for share constraint.\n  forShare: function forShare() {\n    this._single.lock = 'forShare';\n    return this;\n  },\n\n\n  // Takes a JS object of methods to call and calls them\n  fromJS: function fromJS(obj) {\n    var _this = this;\n\n    (0, _each3.default)(obj, function (val, key) {\n      if (typeof _this[key] !== 'function') {\n        helpers.warn('Knex Error: unknown key ' + key);\n      }\n      if (Array.isArray(val)) {\n        _this[key].apply(_this, val);\n      } else {\n        _this[key](val);\n      }\n    });\n    return this;\n  },\n\n\n  // Passes query to provided callback function, useful for e.g. composing\n  // domain-specific helpers\n  modify: function modify(callback) {\n    callback.apply(this, [this].concat((0, _tail3.default)(arguments)));\n    return this;\n  },\n\n\n  // ----------------------------------------------------------------------\n\n  // Helper for the incrementing/decrementing queries.\n  _counter: function _counter(column, amount, symbol) {\n    var amt = parseInt(amount, 10);\n    if (isNaN(amt)) amt = 1;\n    this._method = 'counter';\n    this._single.counter = {\n      column: column,\n      amount: amt,\n      symbol: symbol || '+'\n    };\n    return this;\n  },\n\n\n  // Helper to get or set the \"boolFlag\" value.\n  _bool: function _bool(val) {\n    if (arguments.length === 1) {\n      this._boolFlag = val;\n      return this;\n    }\n    var ret = this._boolFlag;\n    this._boolFlag = 'and';\n    return ret;\n  },\n\n\n  // Helper to get or set the \"notFlag\" value.\n  _not: function _not(val) {\n    if (arguments.length === 1) {\n      this._notFlag = val;\n      return this;\n    }\n    var ret = this._notFlag;\n    this._notFlag = false;\n    return ret;\n  },\n\n\n  // Helper to get or set the \"joinFlag\" value.\n  _joinType: function _joinType(val) {\n    if (arguments.length === 1) {\n      this._joinFlag = val;\n      return this;\n    }\n    var ret = this._joinFlag || 'inner';\n    this._joinFlag = 'inner';\n    return ret;\n  },\n\n\n  // Helper for compiling any aggregate queries.\n  _aggregate: function _aggregate(method, column, aggregateDistinct) {\n    this._statements.push({\n      grouping: 'columns',\n      type: 'aggregate',\n      method: method,\n      value: column,\n      aggregateDistinct: aggregateDistinct || false\n    });\n    return this;\n  },\n\n\n  // Helper function for clearing or reseting a grouping type from the builder\n  _clearGrouping: function _clearGrouping(grouping) {\n    this._statements = (0, _reject3.default)(this._statements, { grouping: grouping });\n  }\n});\n\nObject.defineProperty(Builder.prototype, 'or', {\n  get: function get() {\n    return this._bool('or');\n  }\n});\n\nObject.defineProperty(Builder.prototype, 'not', {\n  get: function get() {\n    return this._not(true);\n  }\n});\n\nBuilder.prototype.select = Builder.prototype.columns;\nBuilder.prototype.column = Builder.prototype.columns;\nBuilder.prototype.andWhereNot = Builder.prototype.whereNot;\nBuilder.prototype.andWhere = Builder.prototype.where;\nBuilder.prototype.andWhereRaw = Builder.prototype.whereRaw;\nBuilder.prototype.andWhereBetween = Builder.prototype.whereBetween;\nBuilder.prototype.andWhereNotBetween = Builder.prototype.whereNotBetween;\nBuilder.prototype.andHaving = Builder.prototype.having;\nBuilder.prototype.andHavingIn = Builder.prototype.havingIn;\nBuilder.prototype.andHavingNotIn = Builder.prototype.havingNotIn;\nBuilder.prototype.andHavingNull = Builder.prototype.havingNull;\nBuilder.prototype.andHavingNotNull = Builder.prototype.havingNotNull;\nBuilder.prototype.andHavingExists = Builder.prototype.havingExists;\nBuilder.prototype.andHavingNotExists = Builder.prototype.havingNotExists;\nBuilder.prototype.andHavingBetween = Builder.prototype.havingBetween;\nBuilder.prototype.andHavingNotBetween = Builder.prototype.havingNotBetween;\nBuilder.prototype.from = Builder.prototype.table;\nBuilder.prototype.into = Builder.prototype.table;\nBuilder.prototype.del = Builder.prototype.delete;\n\n// Attach all of the top level promise methods that should be chainable.\nrequire('../interface')(Builder);\n\nexports.default = Builder;\nmodule.exports = exports['default'];","/home/travis/build/npmtest/node-npmtest-knex/knex/lib/query/joinclause.js":"'use strict';\n\nexports.__esModule = true;\n\nvar _keys = require('babel-runtime/core-js/object/keys');\n\nvar _keys2 = _interopRequireDefault(_keys);\n\nvar _typeof2 = require('babel-runtime/helpers/typeof');\n\nvar _typeof3 = _interopRequireDefault(_typeof2);\n\nvar _assign2 = require('lodash/assign');\n\nvar _assign3 = _interopRequireDefault(_assign2);\n\nvar _assert = require('assert');\n\nvar _assert2 = _interopRequireDefault(_assert);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n// JoinClause\n// -------\n\n// The \"JoinClause\" is an object holding any necessary info about a join,\n// including the type, and any associated tables & columns being joined.\nfunction JoinClause(table, type, schema) {\n  this.schema = schema;\n  this.table = table;\n  this.joinType = type;\n  this.and = this;\n  this.clauses = [];\n}\n\n(0, _assign3.default)(JoinClause.prototype, {\n\n  grouping: 'join',\n\n  // Adds an \"on\" clause to the current join object.\n  on: function on(first, operator, second) {\n    if (typeof first === 'function') {\n      this.clauses.push({\n        type: 'onWrapped',\n        value: first,\n        bool: this._bool()\n      });\n      return this;\n    }\n\n    var data = void 0;\n    var bool = this._bool();\n    switch (arguments.length) {\n      case 1:\n        {\n          if ((typeof first === 'undefined' ? 'undefined' : (0, _typeof3.default)(first)) === 'object' && typeof first.toSQL !== 'function') {\n            var keys = (0, _keys2.default)(first);\n            var i = -1;\n            var method = bool === 'or' ? 'orOn' : 'on';\n            while (++i < keys.length) {\n              this[method](keys[i], first[keys[i]]);\n            }\n            return this;\n          } else {\n            data = { type: 'onRaw', value: first, bool: bool };\n          }\n          break;\n        }\n      case 2:\n        data = { type: 'onBasic', column: first, operator: '=', value: operator, bool: bool };break;\n      default:\n        data = { type: 'onBasic', column: first, operator: operator, value: second, bool: bool };\n    }\n    this.clauses.push(data);\n    return this;\n  },\n\n\n  // Adds a \"using\" clause to the current join.\n  using: function using(column) {\n    return this.clauses.push({ type: 'onUsing', column: column, bool: this._bool() });\n  },\n\n\n  /*// Adds an \"and on\" clause to the current join object.\n  andOn() {\n    return this.on.apply(this, arguments);\n  },*/\n\n  // Adds an \"or on\" clause to the current join object.\n  orOn: function orOn(first, operator, second) {\n    return this._bool('or').on.apply(this, arguments);\n  },\n  onBetween: function onBetween(column, values) {\n    (0, _assert2.default)(Array.isArray(values), 'The second argument to onBetween must be an array.');\n    (0, _assert2.default)(values.length === 2, 'You must specify 2 values for the onBetween clause');\n    this.clauses.push({\n      type: 'onBetween',\n      column: column,\n      value: values,\n      bool: this._bool(),\n      not: this._not()\n    });\n    return this;\n  },\n  onNotBetween: function onNotBetween(column, values) {\n    return this._not(true).onBetween(column, values);\n  },\n  orOnBetween: function orOnBetween(column, values) {\n    return this._bool('or').onBetween(column, values);\n  },\n  orOnNotBetween: function orOnNotBetween(column, values) {\n    return this._bool('or')._not(true).onBetween(column, values);\n  },\n  onIn: function onIn(column, values) {\n    if (Array.isArray(values) && values.length === 0) return this.where(this._not());\n    this.clauses.push({\n      type: 'onIn',\n      column: column,\n      value: values,\n      not: this._not(),\n      bool: this._bool()\n    });\n    return this;\n  },\n  onNotIn: function onNotIn(column, values) {\n    return this._not(true).onIn(column, values);\n  },\n  orOnIn: function orOnIn(column, values) {\n    return this._bool('or').onIn(column, values);\n  },\n  orOnNotIn: function orOnNotIn(column, values) {\n    return this._bool('or')._not(true).onIn(column, values);\n  },\n  onNull: function onNull(column) {\n    this.clauses.push({\n      type: 'onNull',\n      column: column,\n      not: this._not(),\n      bool: this._bool()\n    });\n    return this;\n  },\n  orOnNull: function orOnNull(callback) {\n    return this._bool('or').onNull(callback);\n  },\n  onNotNull: function onNotNull(callback) {\n    return this._not(true).onNull(callback);\n  },\n  orOnNotNull: function orOnNotNull(callback) {\n    return this._not(true)._bool('or').onNull(callback);\n  },\n  onExists: function onExists(callback) {\n    this.clauses.push({\n      type: 'onExists',\n      value: callback,\n      not: this._not(),\n      bool: this._bool()\n    });\n    return this;\n  },\n  orOnExists: function orOnExists(callback) {\n    return this._bool('or').onExists(callback);\n  },\n  onNotExists: function onNotExists(callback) {\n    return this._not(true).onExists(callback);\n  },\n  orOnNotExists: function orOnNotExists(callback) {\n    return this._not(true)._bool('or').onExists(callback);\n  },\n\n\n  // Explicitly set the type of join, useful within a function when creating a grouped join.\n  type: function type(_type) {\n    this.joinType = _type;\n    return this;\n  },\n  _bool: function _bool(bool) {\n    if (arguments.length === 1) {\n      this._boolFlag = bool;\n      return this;\n    }\n    var ret = this._boolFlag || 'and';\n    this._boolFlag = 'and';\n    return ret;\n  },\n  _not: function _not(val) {\n    if (arguments.length === 1) {\n      this._notFlag = val;\n      return this;\n    }\n    var ret = this._notFlag;\n    this._notFlag = false;\n    return ret;\n  }\n});\n\nObject.defineProperty(JoinClause.prototype, 'or', {\n  get: function get() {\n    return this._bool('or');\n  }\n});\n\nJoinClause.prototype.andOn = JoinClause.prototype.on;\nJoinClause.prototype.andOnIn = JoinClause.prototype.onIn;\nJoinClause.prototype.andOnNotIn = JoinClause.prototype.onNotIn;\nJoinClause.prototype.andOnNull = JoinClause.prototype.onNull;\nJoinClause.prototype.andOnNotNull = JoinClause.prototype.onNotNull;\nJoinClause.prototype.andOnExists = JoinClause.prototype.onExists;\nJoinClause.prototype.andOnNotExists = JoinClause.prototype.onNotExists;\nJoinClause.prototype.andOnBetween = JoinClause.prototype.onBetween;\nJoinClause.prototype.andOnNotBetween = JoinClause.prototype.onNotBetween;\n\nexports.default = JoinClause;\nmodule.exports = exports['default'];","/home/travis/build/npmtest/node-npmtest-knex/knex/lib/interface.js":"'use strict';\n\nexports.__esModule = true;\n\nvar _each2 = require('lodash/each');\n\nvar _each3 = _interopRequireDefault(_each2);\n\nvar _clone2 = require('lodash/clone');\n\nvar _clone3 = _interopRequireDefault(_clone2);\n\nvar _map2 = require('lodash/map');\n\nvar _map3 = _interopRequireDefault(_map2);\n\nvar _isArray2 = require('lodash/isArray');\n\nvar _isArray3 = _interopRequireDefault(_isArray2);\n\nexports.default = function (Target) {\n\n  Target.prototype.toQuery = function (tz) {\n    var _this = this;\n\n    var data = this.toSQL(this._method, tz);\n    if (!(0, _isArray3.default)(data)) data = [data];\n    return (0, _map3.default)(data, function (statement) {\n      return _this.client._formatQuery(statement.sql, statement.bindings, tz);\n    }).join(';\\n');\n  };\n\n  // Create a new instance of the `Runner`, passing in the current object.\n  Target.prototype.then = function () /* onFulfilled, onRejected */{\n    var result = this.client.runner(this).run();\n    return result.then.apply(result, arguments);\n  };\n\n  // Add additional \"options\" to the builder. Typically used for client specific\n  // items, like the `mysql` and `sqlite3` drivers.\n  Target.prototype.options = function (opts) {\n    this._options = this._options || [];\n    this._options.push((0, _clone3.default)(opts) || {});\n    return this;\n  };\n\n  // Sets an explicit \"connnection\" we wish to use for this query.\n  Target.prototype.connection = function (connection) {\n    this._connection = connection;\n    return this;\n  };\n\n  // Set a debug flag for the current schema query stack.\n  Target.prototype.debug = function (enabled) {\n    this._debug = arguments.length ? enabled : true;\n    return this;\n  };\n\n  // Set the transaction object for this query.\n  Target.prototype.transacting = function (t) {\n    if (t && t.client) {\n      if (!t.client.transacting) {\n        helpers.warn('Invalid transaction value: ' + t.client);\n      } else {\n        this.client = t.client;\n      }\n    }\n    return this;\n  };\n\n  // Initializes a stream.\n  Target.prototype.stream = function (options) {\n    return this.client.runner(this).stream(options);\n  };\n\n  // Initialize a stream & pipe automatically.\n  Target.prototype.pipe = function (writable, options) {\n    return this.client.runner(this).pipe(writable, options);\n  };\n\n  // Creates a method which \"coerces\" to a promise, by calling a\n  // \"then\" method on the current `Target`\n  (0, _each3.default)(['bind', 'catch', 'finally', 'asCallback', 'spread', 'map', 'reduce', 'tap', 'thenReturn', 'return', 'yield', 'ensure', 'reflect', 'get', 'mapSeries', 'delay'], function (method) {\n    Target.prototype[method] = function () {\n      var promise = this.then();\n      return promise[method].apply(promise, arguments);\n    };\n  });\n};\n\nvar _helpers = require('./helpers');\n\nvar helpers = _interopRequireWildcard(_helpers);\n\nfunction _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nmodule.exports = exports['default'];","/home/travis/build/npmtest/node-npmtest-knex/knex/lib/client.js":"'use strict';\n\nexports.__esModule = true;\n\nvar _cloneDeep2 = require('lodash/cloneDeep');\n\nvar _cloneDeep3 = _interopRequireDefault(_cloneDeep2);\n\nvar _uniqueId2 = require('lodash/uniqueId');\n\nvar _uniqueId3 = _interopRequireDefault(_uniqueId2);\n\nvar _assign2 = require('lodash/assign');\n\nvar _assign3 = _interopRequireDefault(_assign2);\n\nvar _bluebird = require('bluebird');\n\nvar _bluebird2 = _interopRequireDefault(_bluebird);\n\nvar _helpers = require('./helpers');\n\nvar helpers = _interopRequireWildcard(_helpers);\n\nvar _raw = require('./raw');\n\nvar _raw2 = _interopRequireDefault(_raw);\n\nvar _runner = require('./runner');\n\nvar _runner2 = _interopRequireDefault(_runner);\n\nvar _formatter = require('./formatter');\n\nvar _formatter2 = _interopRequireDefault(_formatter);\n\nvar _transaction = require('./transaction');\n\nvar _transaction2 = _interopRequireDefault(_transaction);\n\nvar _builder = require('./query/builder');\n\nvar _builder2 = _interopRequireDefault(_builder);\n\nvar _compiler = require('./query/compiler');\n\nvar _compiler2 = _interopRequireDefault(_compiler);\n\nvar _builder3 = require('./schema/builder');\n\nvar _builder4 = _interopRequireDefault(_builder3);\n\nvar _compiler3 = require('./schema/compiler');\n\nvar _compiler4 = _interopRequireDefault(_compiler3);\n\nvar _tablebuilder = require('./schema/tablebuilder');\n\nvar _tablebuilder2 = _interopRequireDefault(_tablebuilder);\n\nvar _tablecompiler = require('./schema/tablecompiler');\n\nvar _tablecompiler2 = _interopRequireDefault(_tablecompiler);\n\nvar _columnbuilder = require('./schema/columnbuilder');\n\nvar _columnbuilder2 = _interopRequireDefault(_columnbuilder);\n\nvar _columncompiler = require('./schema/columncompiler');\n\nvar _columncompiler2 = _interopRequireDefault(_columncompiler);\n\nvar _genericPool = require('generic-pool');\n\nvar _inherits = require('inherits');\n\nvar _inherits2 = _interopRequireDefault(_inherits);\n\nvar _events = require('events');\n\nvar _string = require('./query/string');\n\nfunction _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar debug = require('debug')('knex:client');\nvar debugQuery = require('debug')('knex:query');\nvar debugBindings = require('debug')('knex:bindings');\nvar debugPool = require('debug')('knex:pool');\n\nvar id = 0;\nfunction clientId() {\n  return 'client' + id++;\n}\n\n// The base client provides the general structure\n// for a dialect specific client object.\nfunction Client() {\n  var config = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];\n\n  this.config = config;\n\n  //Client is a required field, so throw error if it's not supplied.\n  //If 'this.dialect' is set, then this is a 'super()' call, in which case\n  //'client' does not have to be set as it's already assigned on the client prototype.\n  if (!this.config.client && !this.dialect) {\n    throw new Error('knex: Required configuration option \\'client\\' is missing.');\n  }\n\n  this.connectionSettings = (0, _cloneDeep3.default)(config.connection || {});\n  if (this.driverName && config.connection) {\n    this.initializeDriver();\n    if (!config.pool || config.pool && config.pool.max !== 0) {\n      this.__cid = clientId();\n      this.initializePool(config);\n    }\n  }\n  this.valueForUndefined = this.raw('DEFAULT');\n  if (config.useNullAsDefault) {\n    this.valueForUndefined = null;\n  }\n}\n(0, _inherits2.default)(Client, _events.EventEmitter);\n\n(0, _assign3.default)(Client.prototype, {\n  formatter: function formatter() {\n    return new _formatter2.default(this);\n  },\n  queryBuilder: function queryBuilder() {\n    return new _builder2.default(this);\n  },\n  queryCompiler: function queryCompiler(builder) {\n    return new _compiler2.default(this, builder);\n  },\n  schemaBuilder: function schemaBuilder() {\n    return new _builder4.default(this);\n  },\n  schemaCompiler: function schemaCompiler(builder) {\n    return new _compiler4.default(this, builder);\n  },\n  tableBuilder: function tableBuilder(type, tableName, fn) {\n    return new _tablebuilder2.default(this, type, tableName, fn);\n  },\n  tableCompiler: function tableCompiler(tableBuilder) {\n    return new _tablecompiler2.default(this, tableBuilder);\n  },\n  columnBuilder: function columnBuilder(tableBuilder, type, args) {\n    return new _columnbuilder2.default(this, tableBuilder, type, args);\n  },\n  columnCompiler: function columnCompiler(tableBuilder, columnBuilder) {\n    return new _columncompiler2.default(this, tableBuilder, columnBuilder);\n  },\n  runner: function runner(connection) {\n    return new _runner2.default(this, connection);\n  },\n  transaction: function transaction(container, config, outerTx) {\n    return new _transaction2.default(this, container, config, outerTx);\n  },\n  raw: function raw() {\n    var _ref;\n\n    return (_ref = new _raw2.default(this)).set.apply(_ref, arguments);\n  },\n  _formatQuery: function _formatQuery(sql, bindings, timeZone) {\n    var _this = this;\n\n    bindings = bindings == null ? [] : [].concat(bindings);\n    var index = 0;\n    return sql.replace(/\\\\?\\?/g, function (match) {\n      if (match === '\\\\?') {\n        return '?';\n      }\n      if (index === bindings.length) {\n        return match;\n      }\n      var value = bindings[index++];\n      return _this._escapeBinding(value, { timeZone: timeZone });\n    });\n  },\n\n\n  _escapeBinding: (0, _string.makeEscape)({\n    escapeString: function escapeString(str) {\n      return '\\'' + str.replace(/'/g, \"''\") + '\\'';\n    }\n  }),\n\n  query: function query(connection, obj) {\n    var _this2 = this;\n\n    if (typeof obj === 'string') obj = { sql: obj };\n    obj.bindings = this.prepBindings(obj.bindings);\n    debugQuery(obj.sql);\n    this.emit('query', (0, _assign3.default)({ __knexUid: connection.__knexUid }, obj));\n    debugBindings(obj.bindings);\n    return this._query(connection, obj).catch(function (err) {\n      err.message = _this2._formatQuery(obj.sql, obj.bindings) + ' - ' + err.message;\n      _this2.emit('query-error', err, (0, _assign3.default)({ __knexUid: connection.__knexUid }, obj));\n      throw err;\n    });\n  },\n  stream: function stream(connection, obj, _stream, options) {\n    if (typeof obj === 'string') obj = { sql: obj };\n    this.emit('query', (0, _assign3.default)({ __knexUid: connection.__knexUid }, obj));\n    debugQuery(obj.sql);\n    obj.bindings = this.prepBindings(obj.bindings);\n    debugBindings(obj.bindings);\n    return this._stream(connection, obj, _stream, options);\n  },\n  prepBindings: function prepBindings(bindings) {\n    return bindings;\n  },\n  wrapIdentifier: function wrapIdentifier(value) {\n    return value !== '*' ? '\"' + value.replace(/\"/g, '\"\"') + '\"' : '*';\n  },\n  initializeDriver: function initializeDriver() {\n    try {\n      this.driver = this._driver();\n    } catch (e) {\n      helpers.exit('Knex: run\\n$ npm install ' + this.driverName + ' --save\\n' + e.stack);\n    }\n  },\n  poolDefaults: function poolDefaults(poolConfig) {\n    var _this3 = this;\n\n    var name = this.dialect + ':' + this.driverName + ':' + this.__cid;\n    return {\n      min: 2,\n      max: 10,\n      name: name,\n      log: function log(str, level) {\n        if (level === 'info') {\n          debugPool(level.toUpperCase() + ' pool ' + name + ' - ' + str);\n        }\n      },\n\n      create: function create(callback) {\n        _this3.acquireRawConnection().tap(function (connection) {\n          connection.__knexUid = (0, _uniqueId3.default)('__knexUid');\n          if (poolConfig.afterCreate) {\n            return _bluebird2.default.promisify(poolConfig.afterCreate)(connection);\n          }\n        }).asCallback(callback);\n      },\n      destroy: function destroy(connection) {\n        if (poolConfig.beforeDestroy) {\n          helpers.warn('\\n            beforeDestroy is deprecated, please open an issue if you use this\\n            to discuss alternative apis\\n          ');\n          poolConfig.beforeDestroy(connection, function () {});\n        }\n        if (connection !== void 0) {\n          _this3.destroyRawConnection(connection);\n        }\n      },\n      validate: function validate(connection) {\n        if (connection.__knex__disposed) {\n          helpers.warn('Connection Error: ' + connection.__knex__disposed);\n          return false;\n        }\n        return _this3.validateConnection(connection);\n      }\n    };\n  },\n  initializePool: function initializePool(config) {\n    if (this.pool) {\n      helpers.warn('The pool has already been initialized');\n      return;\n    }\n    this.pool = new _genericPool.Pool((0, _assign3.default)(this.poolDefaults(config.pool || {}), config.pool));\n  },\n  validateConnection: function validateConnection(connection) {\n    return true;\n  },\n\n\n  // Acquire a connection from the pool.\n  acquireConnection: function acquireConnection() {\n    var _this4 = this;\n\n    return new _bluebird2.default(function (resolver, rejecter) {\n      if (!_this4.pool) {\n        return rejecter(new Error('Unable to acquire a connection'));\n      }\n      var wasRejected = false;\n      var t = setTimeout(function () {\n        wasRejected = true;\n        rejecter(new _bluebird2.default.TimeoutError('Knex: Timeout acquiring a connection. The pool is probably full. ' + 'Are you missing a .transacting(trx) call?'));\n      }, _this4.config.acquireConnectionTimeout || 60000);\n      _this4.pool.acquire(function (err, connection) {\n        clearTimeout(t);\n        if (err) {\n          return rejecter(err);\n        }\n        if (wasRejected) {\n          _this4.pool.release(connection);\n        } else {\n          debug('acquired connection from pool: %s', connection.__knexUid);\n          resolver(connection);\n        }\n      });\n    });\n  },\n\n\n  // Releases a connection back to the connection pool,\n  // returning a promise resolved when the connection is released.\n  releaseConnection: function releaseConnection(connection) {\n    var _this5 = this;\n\n    return new _bluebird2.default(function (resolver) {\n      debug('releasing connection to pool: %s', connection.__knexUid);\n      _this5.pool.release(connection);\n      resolver();\n    });\n  },\n\n\n  // Destroy the current connection pool for the client.\n  destroy: function destroy(callback) {\n    var _this6 = this;\n\n    var promise = new _bluebird2.default(function (resolver) {\n      if (!_this6.pool) {\n        return resolver();\n      }\n      _this6.pool.drain(function () {\n        _this6.pool.destroyAllNow(function () {\n          _this6.pool = undefined;\n          resolver();\n        });\n      });\n    });\n\n    // Allow either a callback or promise interface for destruction.\n    if (typeof callback === 'function') {\n      promise.asCallback(callback);\n    } else {\n      return promise;\n    }\n  },\n\n\n  // Return the database being used by this client.\n  database: function database() {\n    return this.connectionSettings.database;\n  },\n  toString: function toString() {\n    return '[object KnexClient]';\n  },\n\n\n  canCancelQuery: false,\n\n  assertCanCancelQuery: function assertCanCancelQuery() {\n    if (!this.canCancelQuery) {\n      throw new Error(\"Query cancelling not supported for this dialect\");\n    }\n  },\n  cancelQuery: function cancelQuery() {\n    throw new Error(\"Query cancelling not supported for this dialect\");\n  }\n});\n\nexports.default = Client;\nmodule.exports = exports['default'];","/home/travis/build/npmtest/node-npmtest-knex/knex/lib/runner.js":"'use strict';\n\nexports.__esModule = true;\n\nvar _noop2 = require('lodash/noop');\n\nvar _noop3 = _interopRequireDefault(_noop2);\n\nvar _isArray2 = require('lodash/isArray');\n\nvar _isArray3 = _interopRequireDefault(_isArray2);\n\nvar _assign2 = require('lodash/assign');\n\nvar _assign3 = _interopRequireDefault(_assign2);\n\nvar _bluebird = require('bluebird');\n\nvar _bluebird2 = _interopRequireDefault(_bluebird);\n\nvar _helpers = require('./helpers');\n\nvar helpers = _interopRequireWildcard(_helpers);\n\nfunction _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar PassThrough = void 0;\n\n// The \"Runner\" constructor takes a \"builder\" (query, schema, or raw)\n// and runs through each of the query statements, calling any additional\n// \"output\" method provided alongside the query and bindings.\nfunction Runner(client, builder) {\n  this.client = client;\n  this.builder = builder;\n  this.queries = [];\n\n  // The \"connection\" object is set on the runner when\n  // \"run\" is called.\n  this.connection = void 0;\n}\n\n(0, _assign3.default)(Runner.prototype, {\n\n  // \"Run\" the target, calling \"toSQL\" on the builder, returning\n  // an object or array of queries to run, each of which are run on\n  // a single connection.\n  run: function run() {\n    var runner = this;\n    return _bluebird2.default.using(this.ensureConnection(), function (connection) {\n      runner.connection = connection;\n\n      runner.client.emit('start', runner.builder);\n      runner.builder.emit('start', runner.builder);\n      var sql = runner.builder.toSQL();\n\n      if (runner.builder._debug) {\n        helpers.debugLog(sql);\n      }\n\n      if ((0, _isArray3.default)(sql)) {\n        return runner.queryArray(sql);\n      }\n      return runner.query(sql);\n    })\n\n    // If there are any \"error\" listeners, we fire an error event\n    // and then re-throw the error to be eventually handled by\n    // the promise chain. Useful if you're wrapping in a custom `Promise`.\n    .catch(function (err) {\n      if (runner.builder._events && runner.builder._events.error) {\n        runner.builder.emit('error', err);\n      }\n      throw err;\n    })\n\n    // Fire a single \"end\" event on the builder when\n    // all queries have successfully completed.\n    .tap(function () {\n      runner.builder.emit('end');\n    });\n  },\n\n\n  // Stream the result set, by passing through to the dialect's streaming\n  // capabilities. If the options are\n  stream: function stream(options, handler) {\n\n    // If we specify stream(handler).then(...\n    if (arguments.length === 1) {\n      if (typeof options === 'function') {\n        handler = options;\n        options = {};\n      }\n    }\n\n    // Determines whether we emit an error or throw here.\n    var hasHandler = typeof handler === 'function';\n\n    // Lazy-load the \"PassThrough\" dependency.\n    PassThrough = PassThrough || require('readable-stream').PassThrough;\n\n    var runner = this;\n    var stream = new PassThrough({ objectMode: true });\n    var promise = _bluebird2.default.using(this.ensureConnection(), function (connection) {\n      runner.connection = connection;\n      var sql = runner.builder.toSQL();\n      var err = new Error('The stream may only be used with a single query statement.');\n      if ((0, _isArray3.default)(sql)) {\n        if (hasHandler) throw err;\n        stream.emit('error', err);\n      }\n      return runner.client.stream(runner.connection, sql, stream, options);\n    });\n\n    // If a function is passed to handle the stream, send the stream\n    // there and return the promise, otherwise just return the stream\n    // and the promise will take care of itsself.\n    if (hasHandler) {\n      handler(stream);\n      return promise;\n    }\n\n    // This promise is unreachable since no handler was given, so noop any\n    // exceptions. Errors should be handled in the stream's 'error' event.\n    promise.catch(_noop3.default);\n    return stream;\n  },\n\n\n  // Allow you to pipe the stream to a writable stream.\n  pipe: function pipe(writable, options) {\n    return this.stream(options).pipe(writable);\n  },\n\n\n  // \"Runs\" a query, returning a promise. All queries specified by the builder are guaranteed\n  // to run in sequence, and on the same connection, especially helpful when schema building\n  // and dealing with foreign key constraints, etc.\n  query: _bluebird2.default.method(function (obj) {\n    var _this = this;\n\n    this.builder.emit('query', (0, _assign3.default)({ __knexUid: this.connection.__knexUid }, obj));\n    var runner = this;\n    var queryPromise = this.client.query(this.connection, obj);\n\n    if (obj.timeout) {\n      queryPromise = queryPromise.timeout(obj.timeout);\n    }\n\n    return queryPromise.then(function (resp) {\n      var processedResponse = _this.client.processResponse(resp, runner);\n      _this.builder.emit('query-response', processedResponse, (0, _assign3.default)({ __knexUid: _this.connection.__knexUid }, obj), _this.builder);\n      _this.client.emit('query-response', processedResponse, (0, _assign3.default)({ __knexUid: _this.connection.__knexUid }, obj), _this.builder);\n      return processedResponse;\n    }).catch(_bluebird2.default.TimeoutError, function (error) {\n      var timeout = obj.timeout;\n      var sql = obj.sql;\n      var bindings = obj.bindings;\n\n\n      var cancelQuery = void 0;\n      if (obj.cancelOnTimeout) {\n        cancelQuery = _this.client.cancelQuery(_this.connection);\n      } else {\n        cancelQuery = _bluebird2.default.resolve();\n      }\n\n      return cancelQuery.catch(function (cancelError) {\n        // cancellation failed\n        throw (0, _assign3.default)(cancelError, {\n          message: 'After query timeout of ' + timeout + 'ms exceeded, cancelling of query failed.',\n          sql: sql, bindings: bindings, timeout: timeout\n        });\n      }).then(function () {\n        // cancellation succeeded, rethrow timeout error\n        throw (0, _assign3.default)(error, {\n          message: 'Defined query timeout of ' + timeout + 'ms exceeded when running query.',\n          sql: sql, bindings: bindings, timeout: timeout\n        });\n      });\n    }).catch(function (error) {\n      _this.builder.emit('query-error', error, (0, _assign3.default)({ __knexUid: _this.connection.__knexUid }, obj));\n      throw error;\n    });\n  }),\n\n  // In the case of the \"schema builder\" we call `queryArray`, which runs each\n  // of the queries in sequence.\n  queryArray: function queryArray(queries) {\n    return queries.length === 1 ? this.query(queries[0]) : _bluebird2.default.bind(this).return(queries).reduce(function (memo, query) {\n      return this.query(query).then(function (resp) {\n        memo.push(resp);\n        return memo;\n      });\n    }, []);\n  },\n\n\n  // Check whether there's a transaction flag, and that it has a connection.\n  ensureConnection: function ensureConnection() {\n    var _this2 = this;\n\n    return _bluebird2.default.try(function () {\n      return _this2.connection || new _bluebird2.default(function (resolver, rejecter) {\n        // need to return promise or null from handler to prevent warning from bluebird\n        return _this2.client.acquireConnection().then(resolver).catch(_bluebird2.default.TimeoutError, function (error) {\n          if (_this2.builder) {\n            error.sql = _this2.builder.sql;\n            error.bindings = _this2.builder.bindings;\n          }\n          throw error;\n        }).catch(rejecter);\n      });\n    }).disposer(function () {\n      // need to return promise or null from handler to prevent warning from bluebird\n      return _this2.client.releaseConnection(_this2.connection);\n    });\n  }\n});\n\nexports.default = Runner;\nmodule.exports = exports['default'];","/home/travis/build/npmtest/node-npmtest-knex/knex/lib/transaction.js":"'use strict';\n\nexports.__esModule = true;\n\nvar _create = require('babel-runtime/core-js/object/create');\n\nvar _create2 = _interopRequireDefault(_create);\n\nvar _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');\n\nvar _classCallCheck3 = _interopRequireDefault(_classCallCheck2);\n\nvar _possibleConstructorReturn2 = require('babel-runtime/helpers/possibleConstructorReturn');\n\nvar _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);\n\nvar _inherits2 = require('babel-runtime/helpers/inherits');\n\nvar _inherits3 = _interopRequireDefault(_inherits2);\n\nvar _isUndefined2 = require('lodash/isUndefined');\n\nvar _isUndefined3 = _interopRequireDefault(_isUndefined2);\n\nvar _uniqueId2 = require('lodash/uniqueId');\n\nvar _uniqueId3 = _interopRequireDefault(_uniqueId2);\n\nvar _bluebird = require('bluebird');\n\nvar _bluebird2 = _interopRequireDefault(_bluebird);\n\nvar _events = require('events');\n\nvar _debug = require('debug');\n\nvar _debug2 = _interopRequireDefault(_debug);\n\nvar _makeKnex = require('./util/make-knex');\n\nvar _makeKnex2 = _interopRequireDefault(_makeKnex);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n// Transaction\n// -------\nvar debug = (0, _debug2.default)('knex:tx');\n\n// Acts as a facade for a Promise, keeping the internal state\n// and managing any child transactions.\nvar Transaction = function (_EventEmitter) {\n  (0, _inherits3.default)(Transaction, _EventEmitter);\n\n  function Transaction(client, container, config, outerTx) {\n    (0, _classCallCheck3.default)(this, Transaction);\n\n    var _this = (0, _possibleConstructorReturn3.default)(this, _EventEmitter.call(this));\n\n    var txid = _this.txid = (0, _uniqueId3.default)('trx');\n\n    _this.client = client;\n    _this.outerTx = outerTx;\n    _this.trxClient = undefined;\n    _this._debug = client.config && client.config.debug;\n\n    debug('%s: Starting %s transaction', txid, outerTx ? 'nested' : 'top level');\n\n    _this._promise = _bluebird2.default.using(_this.acquireConnection(client, config, txid), function (connection) {\n\n      var trxClient = _this.trxClient = makeTxClient(_this, client, connection);\n      var init = client.transacting ? _this.savepoint(connection) : _this.begin(connection);\n\n      init.then(function () {\n        return makeTransactor(_this, connection, trxClient);\n      }).then(function (transactor) {\n        // If we've returned a \"thenable\" from the transaction container, assume\n        // the rollback and commit are chained to this object's success / failure.\n        // Directly thrown errors are treated as automatic rollbacks.\n        var result = void 0;\n        try {\n          result = container(transactor);\n        } catch (err) {\n          result = _bluebird2.default.reject(err);\n        }\n        if (result && result.then && typeof result.then === 'function') {\n          result.then(function (val) {\n            return transactor.commit(val);\n          }).catch(function (err) {\n            return transactor.rollback(err);\n          });\n        }\n        return null;\n      }).catch(function (e) {\n        return _this._rejecter(e);\n      });\n\n      return new _bluebird2.default(function (resolver, rejecter) {\n        _this._resolver = resolver;\n        _this._rejecter = rejecter;\n      });\n    });\n\n    _this._completed = false;\n\n    // If there's a wrapping transaction, we need to wait for any older sibling\n    // transactions to settle (commit or rollback) before we can start, and we\n    // need to register ourselves with the parent transaction so any younger\n    // siblings can wait for us to complete before they can start.\n    _this._previousSibling = _bluebird2.default.resolve(true);\n    if (outerTx) {\n      if (outerTx._lastChild) _this._previousSibling = outerTx._lastChild;\n      outerTx._lastChild = _this._promise;\n    }\n    return _this;\n  }\n\n  Transaction.prototype.isCompleted = function isCompleted() {\n    return this._completed || this.outerTx && this.outerTx.isCompleted() || false;\n  };\n\n  Transaction.prototype.begin = function begin(conn) {\n    return this.query(conn, 'BEGIN;');\n  };\n\n  Transaction.prototype.savepoint = function savepoint(conn) {\n    return this.query(conn, 'SAVEPOINT ' + this.txid + ';');\n  };\n\n  Transaction.prototype.commit = function commit(conn, value) {\n    return this.query(conn, 'COMMIT;', 1, value);\n  };\n\n  Transaction.prototype.release = function release(conn, value) {\n    return this.query(conn, 'RELEASE SAVEPOINT ' + this.txid + ';', 1, value);\n  };\n\n  Transaction.prototype.rollback = function rollback(conn, error) {\n    var _this2 = this;\n\n    return this.query(conn, 'ROLLBACK;', 2, error).timeout(5000).catch(_bluebird2.default.TimeoutError, function () {\n      _this2._resolver();\n    });\n  };\n\n  Transaction.prototype.rollbackTo = function rollbackTo(conn, error) {\n    var _this3 = this;\n\n    return this.query(conn, 'ROLLBACK TO SAVEPOINT ' + this.txid, 2, error).timeout(5000).catch(_bluebird2.default.TimeoutError, function () {\n      _this3._resolver();\n    });\n  };\n\n  Transaction.prototype.query = function query(conn, sql, status, value) {\n    var _this4 = this;\n\n    var q = this.trxClient.query(conn, sql).catch(function (err) {\n      status = 2;\n      value = err;\n      _this4._completed = true;\n      debug('%s error running transaction query', _this4.txid);\n    }).tap(function () {\n      if (status === 1) {\n        _this4._resolver(value);\n      }\n      if (status === 2) {\n        if ((0, _isUndefined3.default)(value)) {\n          value = new Error('Transaction rejected with non-error: ' + value);\n        }\n        _this4._rejecter(value);\n      }\n    });\n    if (status === 1 || status === 2) {\n      this._completed = true;\n    }\n    return q;\n  };\n\n  Transaction.prototype.debug = function debug(enabled) {\n    this._debug = arguments.length ? enabled : true;\n    return this;\n  };\n\n  // Acquire a connection and create a disposer - either using the one passed\n  // via config or getting one off the client. The disposer will be called once\n  // the original promise is marked completed.\n\n\n  Transaction.prototype.acquireConnection = function acquireConnection(client, config, txid) {\n    var configConnection = config && config.connection;\n    return _bluebird2.default.try(function () {\n      return configConnection || client.acquireConnection();\n    }).disposer(function (connection) {\n      if (!configConnection) {\n        debug('%s: releasing connection', txid);\n        client.releaseConnection(connection);\n      } else {\n        debug('%s: not releasing external connection', txid);\n      }\n    });\n  };\n\n  return Transaction;\n}(_events.EventEmitter);\n\n// The transactor is a full featured knex object, with a \"commit\", a \"rollback\"\n// and a \"savepoint\" function. The \"savepoint\" is just sugar for creating a new\n// transaction. If the rollback is run inside a savepoint, it rolls back to the\n// last savepoint - otherwise it rolls back the transaction.\n\n\nexports.default = Transaction;\nfunction makeTransactor(trx, connection, trxClient) {\n\n  var transactor = (0, _makeKnex2.default)(trxClient);\n\n  transactor.transaction = function (container, options) {\n    return trxClient.transaction(container, options, trx);\n  };\n  transactor.savepoint = function (container, options) {\n    return transactor.transaction(container, options);\n  };\n\n  if (trx.client.transacting) {\n    transactor.commit = function (value) {\n      return trx.release(connection, value);\n    };\n    transactor.rollback = function (error) {\n      return trx.rollbackTo(connection, error);\n    };\n  } else {\n    transactor.commit = function (value) {\n      return trx.commit(connection, value);\n    };\n    transactor.rollback = function (error) {\n      return trx.rollback(connection, error);\n    };\n  }\n\n  return transactor;\n}\n\n// We need to make a client object which always acquires the same\n// connection and does not release back into the pool.\nfunction makeTxClient(trx, client, connection) {\n\n  var trxClient = (0, _create2.default)(client.constructor.prototype);\n  trxClient.config = client.config;\n  trxClient.driver = client.driver;\n  trxClient.connectionSettings = client.connectionSettings;\n  trxClient.transacting = true;\n  trxClient.valueForUndefined = client.valueForUndefined;\n\n  trxClient.on('query', function (arg) {\n    trx.emit('query', arg);\n    client.emit('query', arg);\n  });\n\n  trxClient.on('query-error', function (err, obj) {\n    trx.emit('query-error', err, obj);\n    client.emit('query-error', err, obj);\n  });\n\n  trxClient.on('query-response', function (response, obj, builder) {\n    trx.emit('query-response', response, obj, builder);\n    client.emit('query-response', response, obj, builder);\n  });\n\n  var _query = trxClient.query;\n  trxClient.query = function (conn, obj) {\n    var completed = trx.isCompleted();\n    return _bluebird2.default.try(function () {\n      if (conn !== connection) throw new Error('Invalid connection for transaction query.');\n      if (completed) completedError(trx, obj);\n      return _query.call(trxClient, conn, obj);\n    });\n  };\n  var _stream = trxClient.stream;\n  trxClient.stream = function (conn, obj, stream, options) {\n    var completed = trx.isCompleted();\n    return _bluebird2.default.try(function () {\n      if (conn !== connection) throw new Error('Invalid connection for transaction query.');\n      if (completed) completedError(trx, obj);\n      return _stream.call(trxClient, conn, obj, stream, options);\n    });\n  };\n  trxClient.acquireConnection = function () {\n    return _bluebird2.default.resolve(connection);\n  };\n  trxClient.releaseConnection = function () {\n    return _bluebird2.default.resolve();\n  };\n\n  return trxClient;\n}\n\nfunction completedError(trx, obj) {\n  var sql = typeof obj === 'string' ? obj : obj && obj.sql;\n  debug('%s: Transaction completed: %s', trx.id, sql);\n  throw new Error('Transaction query already complete, run with DEBUG=knex:tx for more info');\n}\n\nvar promiseInterface = ['then', 'bind', 'catch', 'finally', 'asCallback', 'spread', 'map', 'reduce', 'tap', 'thenReturn', 'return', 'yield', 'ensure', 'exec', 'reflect', 'get', 'mapSeries', 'delay'];\n\n// Creates a method which \"coerces\" to a promise, by calling a\n// \"then\" method on the current `Target`.\npromiseInterface.forEach(function (method) {\n  Transaction.prototype[method] = function () {\n    return this._promise = this._promise[method].apply(this._promise, arguments);\n  };\n});\nmodule.exports = exports['default'];","/home/travis/build/npmtest/node-npmtest-knex/knex/lib/util/make-knex.js":"'use strict';\n\nexports.__esModule = true;\n\nvar _defineProperties = require('babel-runtime/core-js/object/define-properties');\n\nvar _defineProperties2 = _interopRequireDefault(_defineProperties);\n\nvar _assign2 = require('lodash/assign');\n\nvar _assign3 = _interopRequireDefault(_assign2);\n\nexports.default = makeKnex;\n\nvar _events = require('events');\n\nvar _migrate = require('../migrate');\n\nvar _migrate2 = _interopRequireDefault(_migrate);\n\nvar _seed = require('../seed');\n\nvar _seed2 = _interopRequireDefault(_seed);\n\nvar _functionhelper = require('../functionhelper');\n\nvar _functionhelper2 = _interopRequireDefault(_functionhelper);\n\nvar _methods = require('../query/methods');\n\nvar _methods2 = _interopRequireDefault(_methods);\n\nvar _helpers = require('../helpers');\n\nvar helpers = _interopRequireWildcard(_helpers);\n\nvar _batchInsert2 = require('./batchInsert');\n\nvar _batchInsert3 = _interopRequireDefault(_batchInsert2);\n\nfunction _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction makeKnex(client) {\n\n  // The object we're potentially using to kick off an initial chain.\n  function knex(tableName, options) {\n    var qb = knex.queryBuilder();\n    if (!tableName) helpers.warn('calling knex without a tableName is deprecated. Use knex.queryBuilder() instead.');\n    return tableName ? qb.table(tableName, options) : qb;\n  }\n\n  (0, _assign3.default)(knex, {\n\n    Promise: require('bluebird'),\n\n    // A new query builder instance.\n    queryBuilder: function queryBuilder() {\n      return client.queryBuilder();\n    },\n    raw: function raw() {\n      return client.raw.apply(client, arguments);\n    },\n    batchInsert: function batchInsert(table, batch) {\n      var chunkSize = arguments.length <= 2 || arguments[2] === undefined ? 1000 : arguments[2];\n\n      return (0, _batchInsert3.default)(this, table, batch, chunkSize);\n    },\n\n\n    // Runs a new transaction, taking a container and returning a promise\n    // for when the transaction is resolved.\n    transaction: function transaction(container, config) {\n      return client.transaction(container, config);\n    },\n\n\n    // Typically never needed, initializes the pool for a knex client.\n    initialize: function initialize(config) {\n      return client.initialize(config);\n    },\n\n\n    // Convenience method for tearing down the pool.\n    destroy: function destroy(callback) {\n      return client.destroy(callback);\n    }\n  });\n\n  // Hook up the \"knex\" object as an EventEmitter.\n  var ee = new _events.EventEmitter();\n  for (var key in ee) {\n    knex[key] = ee[key];\n  }\n\n  // Allow chaining methods from the root object, before\n  // any other information is specified.\n  _methods2.default.forEach(function (method) {\n    knex[method] = function () {\n      var builder = knex.queryBuilder();\n      return builder[method].apply(builder, arguments);\n    };\n  });\n\n  knex.client = client;\n\n  var VERSION = '0.12.6';\n\n  (0, _defineProperties2.default)(knex, {\n\n    __knex__: {\n      get: function get() {\n        helpers.warn('knex.__knex__ is deprecated, you can get the module version' + \"by running require('knex/package').version\");\n        return VERSION;\n      }\n    },\n\n    VERSION: {\n      get: function get() {\n        helpers.warn('knex.VERSION is deprecated, you can get the module version' + \"by running require('knex/package').version\");\n        return VERSION;\n      }\n    },\n\n    schema: {\n      get: function get() {\n        return client.schemaBuilder();\n      }\n    },\n\n    migrate: {\n      get: function get() {\n        return new _migrate2.default(knex);\n      }\n    },\n\n    seed: {\n      get: function get() {\n        return new _seed2.default(knex);\n      }\n    },\n\n    fn: {\n      get: function get() {\n        return new _functionhelper2.default(client);\n      }\n    }\n\n  });\n\n  // Passthrough all \"start\" and \"query\" events to the knex object.\n  client.on('start', function (obj) {\n    knex.emit('start', obj);\n  });\n  client.on('query', function (obj) {\n    knex.emit('query', obj);\n  });\n  client.on('query-error', function (err, obj) {\n    knex.emit('query-error', err, obj);\n  });\n  client.on('query-response', function (response, obj, builder) {\n    knex.emit('query-response', response, obj, builder);\n  });\n\n  client.makeKnex = makeKnex;\n\n  return knex;\n}\nmodule.exports = exports['default'];","/home/travis/build/npmtest/node-npmtest-knex/knex/lib/migrate/index.js":"'use strict';\n\nexports.__esModule = true;\n\nvar _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');\n\nvar _classCallCheck3 = _interopRequireDefault(_classCallCheck2);\n\nvar _freeze = require('babel-runtime/core-js/object/freeze');\n\nvar _freeze2 = _interopRequireDefault(_freeze);\n\nvar _template2 = require('lodash/template');\n\nvar _template3 = _interopRequireDefault(_template2);\n\nvar _max2 = require('lodash/max');\n\nvar _max3 = _interopRequireDefault(_max2);\n\nvar _map2 = require('lodash/map');\n\nvar _map3 = _interopRequireDefault(_map2);\n\nvar _isUndefined2 = require('lodash/isUndefined');\n\nvar _isUndefined3 = _interopRequireDefault(_isUndefined2);\n\nvar _isEmpty2 = require('lodash/isEmpty');\n\nvar _isEmpty3 = _interopRequireDefault(_isEmpty2);\n\nvar _isBoolean2 = require('lodash/isBoolean');\n\nvar _isBoolean3 = _interopRequireDefault(_isBoolean2);\n\nvar _includes2 = require('lodash/includes');\n\nvar _includes3 = _interopRequireDefault(_includes2);\n\nvar _get2 = require('lodash/get');\n\nvar _get3 = _interopRequireDefault(_get2);\n\nvar _filter2 = require('lodash/filter');\n\nvar _filter3 = _interopRequireDefault(_filter2);\n\nvar _each2 = require('lodash/each');\n\nvar _each3 = _interopRequireDefault(_each2);\n\nvar _difference2 = require('lodash/difference');\n\nvar _difference3 = _interopRequireDefault(_difference2);\n\nvar _bind2 = require('lodash/bind');\n\nvar _bind3 = _interopRequireDefault(_bind2);\n\nvar _assign2 = require('lodash/assign');\n\nvar _assign3 = _interopRequireDefault(_assign2);\n\nvar _fs = require('fs');\n\nvar _fs2 = _interopRequireDefault(_fs);\n\nvar _path = require('path');\n\nvar _path2 = _interopRequireDefault(_path);\n\nvar _mkdirp = require('mkdirp');\n\nvar _mkdirp2 = _interopRequireDefault(_mkdirp);\n\nvar _bluebird = require('bluebird');\n\nvar _bluebird2 = _interopRequireDefault(_bluebird);\n\nvar _helpers = require('../helpers');\n\nvar helpers = _interopRequireWildcard(_helpers);\n\nvar _inherits = require('inherits');\n\nvar _inherits2 = _interopRequireDefault(_inherits);\n\nfunction _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n// Migrator\n// -------\nfunction LockError(msg) {\n  this.name = 'MigrationLocked';\n  this.message = msg;\n}\n(0, _inherits2.default)(LockError, Error);\n\nvar SUPPORTED_EXTENSIONS = (0, _freeze2.default)(['.co', '.coffee', '.eg', '.iced', '.js', '.litcoffee', '.ls', '.ts']);\n\nvar CONFIG_DEFAULT = (0, _freeze2.default)({\n  extension: 'js',\n  tableName: 'knex_migrations',\n  directory: './migrations',\n  disableTransactions: false\n});\n\n// The new migration we're performing, typically called from the `knex.migrate`\n// interface on the main `knex` object. Passes the `knex` instance performing\n// the migration.\n\nvar Migrator = function () {\n  function Migrator(knex) {\n    (0, _classCallCheck3.default)(this, Migrator);\n\n    this.knex = knex;\n    this.config = this.setConfig(knex.client.config.migrations);\n  }\n\n  // Migrators to the latest configuration.\n\n\n  Migrator.prototype.latest = function latest(config) {\n    var _this = this;\n\n    this.config = this.setConfig(config);\n    return this._migrationData().tap(validateMigrationList).spread(function (all, completed) {\n      return _this._runBatch((0, _difference3.default)(all, completed), 'up');\n    });\n  };\n\n  // Rollback the last \"batch\" of migrations that were run.\n\n\n  Migrator.prototype.rollback = function rollback(config) {\n    var _this2 = this;\n\n    return _bluebird2.default.try(function () {\n      _this2.config = _this2.setConfig(config);\n      return _this2._migrationData().tap(validateMigrationList).then(function (val) {\n        return _this2._getLastBatch(val);\n      }).then(function (migrations) {\n        return _this2._runBatch((0, _map3.default)(migrations, 'name'), 'down');\n      });\n    });\n  };\n\n  Migrator.prototype.status = function status(config) {\n    this.config = this.setConfig(config);\n\n    return _bluebird2.default.all([this.knex(this.config.tableName).select('*'), this._listAll()]).spread(function (db, code) {\n      return db.length - code.length;\n    });\n  };\n\n  // Retrieves and returns the current migration version we're on, as a promise.\n  // If no migrations have been run yet, return \"none\".\n\n\n  Migrator.prototype.currentVersion = function currentVersion(config) {\n    this.config = this.setConfig(config);\n    return this._listCompleted(config).then(function (completed) {\n      var val = (0, _max3.default)((0, _map3.default)(completed, function (value) {\n        return value.split('_')[0];\n      }));\n      return (0, _isUndefined3.default)(val) ? 'none' : val;\n    });\n  };\n\n  Migrator.prototype.forceFreeMigrationsLock = function forceFreeMigrationsLock(config) {\n    var _this3 = this;\n\n    this.config = this.setConfig(config);\n    var lockTable = this._getLockTableName();\n    return this.knex.schema.hasTable(lockTable).then(function (exist) {\n      return exist && _this3._freeLock();\n    });\n  };\n\n  // Creates a new migration, with a given name.\n\n\n  Migrator.prototype.make = function make(name, config) {\n    var _this4 = this;\n\n    this.config = this.setConfig(config);\n    if (!name) {\n      return _bluebird2.default.reject(new Error('A name must be specified for the generated migration'));\n    }\n\n    return this._ensureFolder(config).then(function (val) {\n      return _this4._generateStubTemplate(val);\n    }).then(function (val) {\n      return _this4._writeNewMigration(name, val);\n    });\n  };\n\n  // Lists all available migration versions, as a sorted array.\n\n\n  Migrator.prototype._listAll = function _listAll(config) {\n    this.config = this.setConfig(config);\n    return _bluebird2.default.promisify(_fs2.default.readdir, { context: _fs2.default })(this._absoluteConfigDir()).then(function (migrations) {\n      return (0, _filter3.default)(migrations, function (value) {\n        var extension = _path2.default.extname(value);\n        return (0, _includes3.default)(SUPPORTED_EXTENSIONS, extension);\n      }).sort();\n    });\n  };\n\n  // Ensures a folder for the migrations exist, dependent on the migration\n  // config settings.\n\n\n  Migrator.prototype._ensureFolder = function _ensureFolder() {\n    var dir = this._absoluteConfigDir();\n    return _bluebird2.default.promisify(_fs2.default.stat, { context: _fs2.default })(dir).catch(function () {\n      return _bluebird2.default.promisify(_mkdirp2.default)(dir);\n    });\n  };\n\n  // Ensures that a proper table has been created, dependent on the migration\n  // config settings.\n\n\n  Migrator.prototype._ensureTable = function _ensureTable() {\n    var _this5 = this;\n\n    var table = this.config.tableName;\n    var lockTable = this._getLockTableName();\n    return this.knex.schema.hasTable(table).then(function (exists) {\n      return !exists && _this5._createMigrationTable(table);\n    }).then(function () {\n      return _this5.knex.schema.hasTable(lockTable);\n    }).then(function (exists) {\n      return !exists && _this5._createMigrationLockTable(lockTable);\n    }).then(function () {\n      return _this5.knex(lockTable).select('*');\n    }).then(function (data) {\n      return !data.length && _this5.knex(lockTable).insert({ is_locked: 0 });\n    });\n  };\n\n  // Create the migration table, if it doesn't already exist.\n\n\n  Migrator.prototype._createMigrationTable = function _createMigrationTable(tableName) {\n    return this.knex.schema.createTableIfNotExists(tableName, function (t) {\n      t.increments();\n      t.string('name');\n      t.integer('batch');\n      t.timestamp('migration_time');\n    });\n  };\n\n  Migrator.prototype._createMigrationLockTable = function _createMigrationLockTable(tableName) {\n    return this.knex.schema.createTableIfNotExists(tableName, function (t) {\n      t.integer('is_locked');\n    });\n  };\n\n  Migrator.prototype._getLockTableName = function _getLockTableName() {\n    return this.config.tableName + '_lock';\n  };\n\n  Migrator.prototype._isLocked = function _isLocked(trx) {\n    var tableName = this._getLockTableName();\n    return this.knex(tableName).transacting(trx).forUpdate().select('*').then(function (data) {\n      return data[0].is_locked;\n    });\n  };\n\n  Migrator.prototype._lockMigrations = function _lockMigrations(trx) {\n    var tableName = this._getLockTableName();\n    return this.knex(tableName).transacting(trx).update({ is_locked: 1 });\n  };\n\n  Migrator.prototype._getLock = function _getLock() {\n    var _this6 = this;\n\n    return this.knex.transaction(function (trx) {\n      return _this6._isLocked(trx).then(function (isLocked) {\n        if (isLocked) {\n          throw new Error(\"Migration table is already locked\");\n        }\n      }).then(function () {\n        return _this6._lockMigrations(trx);\n      });\n    }).catch(function (err) {\n      throw new LockError(err.message);\n    });\n  };\n\n  Migrator.prototype._freeLock = function _freeLock() {\n    var tableName = this._getLockTableName();\n    return this.knex(tableName).update({ is_locked: 0 });\n  };\n\n  // Run a batch of current migrations, in sequence.\n\n\n  Migrator.prototype._runBatch = function _runBatch(migrations, direction) {\n    var _this7 = this;\n\n    return this._getLock().then(function () {\n      return _bluebird2.default.all((0, _map3.default)(migrations, (0, _bind3.default)(_this7._validateMigrationStructure, _this7)));\n    }).then(function () {\n      return _this7._latestBatchNumber();\n    }).then(function (batchNo) {\n      if (direction === 'up') batchNo++;\n      return batchNo;\n    }).then(function (batchNo) {\n      return _this7._waterfallBatch(batchNo, migrations, direction);\n    }).tap(function () {\n      return _this7._freeLock();\n    }).catch(function (error) {\n      var cleanupReady = _bluebird2.default.resolve();\n\n      if (error instanceof LockError) {\n        // If locking error do not free the lock.\n        helpers.warn('Can\\'t take lock to run migrations: ' + error.message);\n        helpers.warn('If you are sure migrations are not running you can release the ' + 'lock manually by deleting all the rows from migrations lock ' + 'table: ' + _this7._getLockTableName());\n      } else {\n        helpers.warn('migrations failed with error: ' + error.message);\n        // If the error was not due to a locking issue, then remove the lock.\n        cleanupReady = _this7._freeLock();\n      }\n\n      return cleanupReady.finally(function () {\n        throw error;\n      });\n    });\n  };\n\n  // Validates some migrations by requiring and checking for an `up` and `down`\n  // function.\n\n\n  Migrator.prototype._validateMigrationStructure = function _validateMigrationStructure(name) {\n    var migration = require(_path2.default.join(this._absoluteConfigDir(), name));\n    if (typeof migration.up !== 'function' || typeof migration.down !== 'function') {\n      throw new Error('Invalid migration: ' + name + ' must have both an up and down function');\n    }\n    return name;\n  };\n\n  // Lists all migrations that have been completed for the current db, as an\n  // array.\n\n\n  Migrator.prototype._listCompleted = function _listCompleted() {\n    var _this8 = this;\n\n    var tableName = this.config.tableName;\n\n    return this._ensureTable(tableName).then(function () {\n      return _this8.knex(tableName).orderBy('id').select('name');\n    }).then(function (migrations) {\n      return (0, _map3.default)(migrations, 'name');\n    });\n  };\n\n  // Gets the migration list from the specified migration directory, as well as\n  // the list of completed migrations to check what should be run.\n\n\n  Migrator.prototype._migrationData = function _migrationData() {\n    return _bluebird2.default.all([this._listAll(), this._listCompleted()]);\n  };\n\n  // Generates the stub template for the current migration, returning a compiled\n  // template.\n\n\n  Migrator.prototype._generateStubTemplate = function _generateStubTemplate() {\n    var stubPath = this.config.stub || _path2.default.join(__dirname, 'stub', this.config.extension + '.stub');\n    return _bluebird2.default.promisify(_fs2.default.readFile, { context: _fs2.default })(stubPath).then(function (stub) {\n      return (0, _template3.default)(stub.toString(), { variable: 'd' });\n    });\n  };\n\n  // Write a new migration to disk, using the config and generated filename,\n  // passing any `variables` given in the config to the template.\n\n\n  Migrator.prototype._writeNewMigration = function _writeNewMigration(name, tmpl) {\n    var config = this.config;\n\n    var dir = this._absoluteConfigDir();\n    if (name[0] === '-') name = name.slice(1);\n    var filename = yyyymmddhhmmss() + '_' + name + '.' + config.extension;\n    return _bluebird2.default.promisify(_fs2.default.writeFile, { context: _fs2.default })(_path2.default.join(dir, filename), tmpl(config.variables || {})).return(_path2.default.join(dir, filename));\n  };\n\n  // Get the last batch of migrations, by name, ordered by insert id in reverse\n  // order.\n\n\n  Migrator.prototype._getLastBatch = function _getLastBatch() {\n    var tableName = this.config.tableName;\n\n    return this.knex(tableName).where('batch', function (qb) {\n      qb.max('batch').from(tableName);\n    }).orderBy('id', 'desc');\n  };\n\n  // Returns the latest batch number.\n\n\n  Migrator.prototype._latestBatchNumber = function _latestBatchNumber() {\n    return this.knex(this.config.tableName).max('batch as max_batch').then(function (obj) {\n      return obj[0].max_batch || 0;\n    });\n  };\n\n  // If transaction config for a single migration is defined, use that.\n  // Otherwise, rely on the common config. This allows enabling/disabling\n  // transaction for a single migration at will, regardless of the common\n  // config.\n\n\n  Migrator.prototype._useTransaction = function _useTransaction(migration, allTransactionsDisabled) {\n    var singleTransactionValue = (0, _get3.default)(migration, 'config.transaction');\n\n    return (0, _isBoolean3.default)(singleTransactionValue) ? singleTransactionValue : !allTransactionsDisabled;\n  };\n\n  // Runs a batch of `migrations` in a specified `direction`, saving the\n  // appropriate database information as the migrations are run.\n\n\n  Migrator.prototype._waterfallBatch = function _waterfallBatch(batchNo, migrations, direction) {\n    var _this9 = this;\n\n    var knex = this.knex;\n    var _config = this.config;\n    var tableName = _config.tableName;\n    var disableTransactions = _config.disableTransactions;\n\n    var directory = this._absoluteConfigDir();\n    var current = _bluebird2.default.bind({ failed: false, failedOn: 0 });\n    var log = [];\n    (0, _each3.default)(migrations, function (migration) {\n      var name = migration;\n      migration = require(directory + '/' + name);\n\n      // We're going to run each of the migrations in the current \"up\".\n      current = current.then(function () {\n        if (_this9._useTransaction(migration, disableTransactions)) {\n          return _this9._transaction(migration, direction, name);\n        }\n        return warnPromise(migration[direction](knex, _bluebird2.default), name);\n      }).then(function () {\n        log.push(_path2.default.join(directory, name));\n        if (direction === 'up') {\n          return knex(tableName).insert({\n            name: name,\n            batch: batchNo,\n            migration_time: new Date()\n          });\n        }\n        if (direction === 'down') {\n          return knex(tableName).where({ name: name }).del();\n        }\n      });\n    });\n\n    return current.thenReturn([batchNo, log]);\n  };\n\n  Migrator.prototype._transaction = function _transaction(migration, direction, name) {\n    return this.knex.transaction(function (trx) {\n      return warnPromise(migration[direction](trx, _bluebird2.default), name, function () {\n        trx.commit();\n      });\n    });\n  };\n\n  Migrator.prototype._absoluteConfigDir = function _absoluteConfigDir() {\n    return _path2.default.resolve(process.cwd(), this.config.directory);\n  };\n\n  Migrator.prototype.setConfig = function setConfig(config) {\n    return (0, _assign3.default)({}, CONFIG_DEFAULT, this.config || {}, config);\n  };\n\n  return Migrator;\n}();\n\n// Validates that migrations are present in the appropriate directories.\n\n\nexports.default = Migrator;\nfunction validateMigrationList(migrations) {\n  var all = migrations[0];\n  var completed = migrations[1];\n  var diff = (0, _difference3.default)(completed, all);\n  if (!(0, _isEmpty3.default)(diff)) {\n    throw new Error('The migration directory is corrupt, the following files are missing: ' + diff.join(', '));\n  }\n}\n\nfunction warnPromise(value, name, fn) {\n  if (!value || typeof value.then !== 'function') {\n    helpers.warn('migration ' + name + ' did not return a promise');\n    if (fn && typeof fn === 'function') fn();\n  }\n  return value;\n}\n\n// Ensure that we have 2 places for each of the date segments.\nfunction padDate(segment) {\n  segment = segment.toString();\n  return segment[1] ? segment : '0' + segment;\n}\n\n// Get a date object in the correct format, without requiring a full out library\n// like \"moment.js\".\nfunction yyyymmddhhmmss() {\n  var d = new Date();\n  return d.getFullYear().toString() + padDate(d.getMonth() + 1) + padDate(d.getDate()) + padDate(d.getHours()) + padDate(d.getMinutes()) + padDate(d.getSeconds());\n}\nmodule.exports = exports['default'];","/home/travis/build/npmtest/node-npmtest-knex/knex/lib/seed/index.js":"'use strict';\n\nexports.__esModule = true;\n\nvar _extend2 = require('lodash/extend');\n\nvar _extend3 = _interopRequireDefault(_extend2);\n\nvar _each2 = require('lodash/each');\n\nvar _each3 = _interopRequireDefault(_each2);\n\nvar _template2 = require('lodash/template');\n\nvar _template3 = _interopRequireDefault(_template2);\n\nvar _bind2 = require('lodash/bind');\n\nvar _bind3 = _interopRequireDefault(_bind2);\n\nvar _map2 = require('lodash/map');\n\nvar _map3 = _interopRequireDefault(_map2);\n\nvar _includes2 = require('lodash/includes');\n\nvar _includes3 = _interopRequireDefault(_includes2);\n\nvar _filter2 = require('lodash/filter');\n\nvar _filter3 = _interopRequireDefault(_filter2);\n\nvar _fs = require('fs');\n\nvar _fs2 = _interopRequireDefault(_fs);\n\nvar _path = require('path');\n\nvar _path2 = _interopRequireDefault(_path);\n\nvar _mkdirp = require('mkdirp');\n\nvar _mkdirp2 = _interopRequireDefault(_mkdirp);\n\nvar _bluebird = require('bluebird');\n\nvar _bluebird2 = _interopRequireDefault(_bluebird);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n// The new seeds we're performing, typically called from the `knex.seed`\n// interface on the main `knex` object. Passes the `knex` instance performing\n// the seeds.\n// Seeder\n// -------\n\nfunction Seeder(knex) {\n  this.knex = knex;\n  this.config = this.setConfig(knex.client.config.seeds);\n}\n\n// Runs all seed files for the given environment.\nSeeder.prototype.run = _bluebird2.default.method(function (config) {\n  this.config = this.setConfig(config);\n  return this._seedData().bind(this).spread(function (all) {\n    return this._runSeeds(all);\n  });\n});\n\n// Creates a new seed file, with a given name.\nSeeder.prototype.make = function (name, config) {\n  this.config = this.setConfig(config);\n  if (!name) _bluebird2.default.rejected(new Error('A name must be specified for the generated seed'));\n  return this._ensureFolder(config).bind(this).then(this._generateStubTemplate).then(this._writeNewSeed(name));\n};\n\n// Lists all available seed files as a sorted array.\nSeeder.prototype._listAll = _bluebird2.default.method(function (config) {\n  this.config = this.setConfig(config);\n  return _bluebird2.default.promisify(_fs2.default.readdir, { context: _fs2.default })(this._absoluteConfigDir()).bind(this).then(function (seeds) {\n    return (0, _filter3.default)(seeds, function (value) {\n      var extension = _path2.default.extname(value);\n      return (0, _includes3.default)(['.co', '.coffee', '.eg', '.iced', '.js', '.litcoffee', '.ls', '.ts'], extension);\n    }).sort();\n  });\n});\n\n// Gets the seed file list from the specified seed directory.\nSeeder.prototype._seedData = function () {\n  return _bluebird2.default.join(this._listAll());\n};\n\n// Ensures a folder for the seeds exist, dependent on the\n// seed config settings.\nSeeder.prototype._ensureFolder = function () {\n  var dir = this._absoluteConfigDir();\n  return _bluebird2.default.promisify(_fs2.default.stat, { context: _fs2.default })(dir).catch(function () {\n    return _bluebird2.default.promisify(_mkdirp2.default)(dir);\n  });\n};\n\n// Run seed files, in sequence.\nSeeder.prototype._runSeeds = function (seeds) {\n  return _bluebird2.default.all((0, _map3.default)(seeds, (0, _bind3.default)(this._validateSeedStructure, this))).bind(this).then(function (seeds) {\n    return _bluebird2.default.bind(this).then(function () {\n      return this._waterfallBatch(seeds);\n    });\n  });\n};\n\n// Validates seed files by requiring and checking for a `seed` function.\nSeeder.prototype._validateSeedStructure = function (name) {\n  var seed = require(_path2.default.join(this._absoluteConfigDir(), name));\n  if (typeof seed.seed !== 'function') {\n    throw new Error('Invalid seed file: ' + name + ' must have a seed function');\n  }\n  return name;\n};\n\n// Generates the stub template for the current seed file, returning a compiled template.\nSeeder.prototype._generateStubTemplate = function () {\n  var stubPath = this.config.stub || _path2.default.join(__dirname, 'stub', this.config.extension + '.stub');\n  return _bluebird2.default.promisify(_fs2.default.readFile, { context: _fs2.default })(stubPath).then(function (stub) {\n    return (0, _template3.default)(stub.toString(), { variable: 'd' });\n  });\n};\n\n// Write a new seed to disk, using the config and generated filename,\n// passing any `variables` given in the config to the template.\nSeeder.prototype._writeNewSeed = function (name) {\n  var config = this.config;\n\n  var dir = this._absoluteConfigDir();\n  return function (tmpl) {\n    if (name[0] === '-') name = name.slice(1);\n    var filename = name + '.' + config.extension;\n    return _bluebird2.default.promisify(_fs2.default.writeFile, { context: _fs2.default })(_path2.default.join(dir, filename), tmpl(config.variables || {})).return(_path2.default.join(dir, filename));\n  };\n};\n\n// Runs a batch of seed files.\nSeeder.prototype._waterfallBatch = function (seeds) {\n  var knex = this.knex;\n\n  var seedDirectory = this._absoluteConfigDir();\n  var current = _bluebird2.default.bind({ failed: false, failedOn: 0 });\n  var log = [];\n  (0, _each3.default)(seeds, function (seed) {\n    var name = _path2.default.join(seedDirectory, seed);\n    seed = require(name);\n\n    // Run each seed file.\n    current = current.then(function () {\n      return seed.seed(knex, _bluebird2.default);\n    }).then(function () {\n      log.push(name);\n    });\n  });\n\n  return current.thenReturn([log]);\n};\n\nSeeder.prototype._absoluteConfigDir = function () {\n  return _path2.default.resolve(process.cwd(), this.config.directory);\n};\n\nSeeder.prototype.setConfig = function (config) {\n  return (0, _extend3.default)({\n    extension: 'js',\n    directory: './seeds'\n  }, this.config || {}, config);\n};\n\nexports.default = Seeder;\nmodule.exports = exports['default'];","/home/travis/build/npmtest/node-npmtest-knex/knex/lib/functionhelper.js":"'use strict';\n\nexports.__esModule = true;\n\n// FunctionHelper\n// -------\nfunction FunctionHelper(client) {\n  this.client = client;\n}\n\nFunctionHelper.prototype.now = function () {\n  return this.client.raw('CURRENT_TIMESTAMP');\n};\n\nexports.default = FunctionHelper;\nmodule.exports = exports['default'];","/home/travis/build/npmtest/node-npmtest-knex/knex/lib/query/methods.js":"'use strict';\n\nexports.__esModule = true;\n\n// All properties we can use to start a query chain\n// from the `knex` object, e.g. `knex.select('*').from(...`\nexports.default = ['with', 'select', 'as', 'columns', 'column', 'from', 'fromJS', 'into', 'withSchema', 'table', 'distinct', 'join', 'joinRaw', 'innerJoin', 'leftJoin', 'leftOuterJoin', 'rightJoin', 'rightOuterJoin', 'outerJoin', 'fullOuterJoin', 'crossJoin', 'where', 'andWhere', 'orWhere', 'whereNot', 'orWhereNot', 'whereRaw', 'whereWrapped', 'havingWrapped', 'orWhereRaw', 'whereExists', 'orWhereExists', 'whereNotExists', 'orWhereNotExists', 'whereIn', 'orWhereIn', 'whereNotIn', 'orWhereNotIn', 'whereNull', 'orWhereNull', 'whereNotNull', 'orWhereNotNull', 'whereBetween', 'whereNotBetween', 'andWhereBetween', 'andWhereNotBetween', 'orWhereBetween', 'orWhereNotBetween', 'groupBy', 'groupByRaw', 'orderBy', 'orderByRaw', 'union', 'unionAll', 'having', 'havingRaw', 'orHaving', 'orHavingRaw', 'offset', 'limit', 'count', 'countDistinct', 'min', 'max', 'sum', 'sumDistinct', 'avg', 'avgDistinct', 'increment', 'decrement', 'first', 'debug', 'pluck', 'clearSelect', 'clearWhere', 'insert', 'update', 'returning', 'del', 'delete', 'truncate', 'transacting', 'connection'];\nmodule.exports = exports['default'];","/home/travis/build/npmtest/node-npmtest-knex/knex/lib/util/batchInsert.js":"'use strict';\n\nexports.__esModule = true;\n\nvar _typeof2 = require('babel-runtime/helpers/typeof');\n\nvar _typeof3 = _interopRequireDefault(_typeof2);\n\nvar _assign2 = require('lodash/assign');\n\nvar _assign3 = _interopRequireDefault(_assign2);\n\nvar _flatten2 = require('lodash/flatten');\n\nvar _flatten3 = _interopRequireDefault(_flatten2);\n\nvar _chunk2 = require('lodash/chunk');\n\nvar _chunk3 = _interopRequireDefault(_chunk2);\n\nvar _isArray2 = require('lodash/isArray');\n\nvar _isArray3 = _interopRequireDefault(_isArray2);\n\nvar _isNumber2 = require('lodash/isNumber');\n\nvar _isNumber3 = _interopRequireDefault(_isNumber2);\n\nexports.default = batchInsert;\n\nvar _bluebird = require('bluebird');\n\nvar _bluebird2 = _interopRequireDefault(_bluebird);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction batchInsert(client, tableName, batch) {\n  var chunkSize = arguments.length <= 3 || arguments[3] === undefined ? 1000 : arguments[3];\n\n\n  var _returning = void 0;\n  var autoTransaction = true;\n  var transaction = null;\n\n  var getTransaction = function getTransaction() {\n    return new _bluebird2.default(function (resolve, reject) {\n      if (transaction) {\n        return resolve(transaction);\n      }\n\n      client.transaction(resolve).catch(reject);\n    });\n  };\n\n  var wrapper = (0, _assign3.default)(new _bluebird2.default(function (resolve, reject) {\n    var chunks = (0, _chunk3.default)(batch, chunkSize);\n\n    if (!(0, _isNumber3.default)(chunkSize) || chunkSize < 1) {\n      return reject(new TypeError('Invalid chunkSize: ' + chunkSize));\n    }\n\n    if (!(0, _isArray3.default)(batch)) {\n      return reject(new TypeError('Invalid batch: Expected array, got ' + (typeof batch === 'undefined' ? 'undefined' : (0, _typeof3.default)(batch))));\n    }\n\n    //Next tick to ensure wrapper functions are called if needed\n    return _bluebird2.default.delay(1).then(getTransaction).then(function (tr) {\n      return _bluebird2.default.mapSeries(chunks, function (items) {\n        return tr(tableName).insert(items, _returning);\n      }).then(function (result) {\n        if (autoTransaction) {\n          tr.commit();\n        }\n\n        return (0, _flatten3.default)(result);\n      }).catch(function (error) {\n        if (autoTransaction) {\n          tr.rollback(error);\n        }\n\n        throw error;\n      });\n    }).then(resolve).catch(reject);\n  }), {\n    returning: function returning(columns) {\n      _returning = columns;\n\n      return this;\n    },\n    transacting: function transacting(tr) {\n      transaction = tr;\n      autoTransaction = false;\n\n      return this;\n    }\n  });\n\n  return wrapper;\n}\nmodule.exports = exports['default'];","/home/travis/build/npmtest/node-npmtest-knex/knex/lib/query/compiler.js":"'use strict';\n\nexports.__esModule = true;\n\nvar _keys = require('babel-runtime/core-js/object/keys');\n\nvar _keys2 = _interopRequireDefault(_keys);\n\nvar _typeof2 = require('babel-runtime/helpers/typeof');\n\nvar _typeof3 = _interopRequireDefault(_typeof2);\n\nvar _reduce2 = require('lodash/reduce');\n\nvar _reduce3 = _interopRequireDefault(_reduce2);\n\nvar _omitBy2 = require('lodash/omitBy');\n\nvar _omitBy3 = _interopRequireDefault(_omitBy2);\n\nvar _map2 = require('lodash/map');\n\nvar _map3 = _interopRequireDefault(_map2);\n\nvar _isUndefined2 = require('lodash/isUndefined');\n\nvar _isUndefined3 = _interopRequireDefault(_isUndefined2);\n\nvar _isString2 = require('lodash/isString');\n\nvar _isString3 = _interopRequireDefault(_isString2);\n\nvar _isEmpty2 = require('lodash/isEmpty');\n\nvar _isEmpty3 = _interopRequireDefault(_isEmpty2);\n\nvar _groupBy2 = require('lodash/groupBy');\n\nvar _groupBy3 = _interopRequireDefault(_groupBy2);\n\nvar _compact2 = require('lodash/compact');\n\nvar _compact3 = _interopRequireDefault(_compact2);\n\nvar _bind2 = require('lodash/bind');\n\nvar _bind3 = _interopRequireDefault(_bind2);\n\nvar _assign2 = require('lodash/assign');\n\nvar _assign3 = _interopRequireDefault(_assign2);\n\nvar _helpers = require('../helpers');\n\nvar helpers = _interopRequireWildcard(_helpers);\n\nvar _raw = require('../raw');\n\nvar _raw2 = _interopRequireDefault(_raw);\n\nvar _joinclause = require('./joinclause');\n\nvar _joinclause2 = _interopRequireDefault(_joinclause);\n\nvar _debug = require('debug');\n\nvar _debug2 = _interopRequireDefault(_debug);\n\nvar _uuid = require('uuid');\n\nvar _uuid2 = _interopRequireDefault(_uuid);\n\nfunction _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar debugBindings = (0, _debug2.default)('knex:bindings');\n\n// The \"QueryCompiler\" takes all of the query statements which\n// have been gathered in the \"QueryBuilder\" and turns them into a\n// properly formatted / bound query string.\n\n// Query Compiler\n// -------\nfunction QueryCompiler(client, builder) {\n  this.client = client;\n  this.method = builder._method || 'select';\n  this.options = builder._options;\n  this.single = builder._single;\n  this.timeout = builder._timeout || false;\n  this.cancelOnTimeout = builder._cancelOnTimeout || false;\n  this.grouped = (0, _groupBy3.default)(builder._statements, 'grouping');\n  this.formatter = client.formatter();\n}\n\nvar components = ['columns', 'join', 'where', 'union', 'group', 'having', 'order', 'limit', 'offset', 'lock'];\n\n(0, _assign3.default)(QueryCompiler.prototype, {\n\n  // Used when the insert call is empty.\n  _emptyInsertValue: 'default values',\n\n  // Collapse the builder into a single object\n  toSQL: function toSQL(method, tz) {\n    this._undefinedInWhereClause = false;\n\n    method = method || this.method;\n    var val = this[method]();\n    var defaults = {\n      method: method,\n      options: (0, _reduce3.default)(this.options, _assign3.default, {}),\n      timeout: this.timeout,\n      cancelOnTimeout: this.cancelOnTimeout,\n      bindings: this.formatter.bindings,\n      __knexQueryUid: _uuid2.default.v4()\n    };\n    if ((0, _isString3.default)(val)) {\n      val = { sql: val };\n    }\n\n    defaults.bindings = defaults.bindings || [];\n\n    if (method === 'select' || method === 'first') {\n      if (this.single.as) {\n        defaults.as = this.single.as;\n      }\n    }\n\n    if (this._undefinedInWhereClause) {\n      debugBindings(defaults.bindings);\n      throw new Error('Undefined binding(s) detected when compiling ' + (method.toUpperCase() + ' query: ' + val.sql));\n    }\n\n    return (0, _assign3.default)(defaults, val);\n  },\n\n\n  // Compiles the `select` statement, or nested sub-selects by calling each of\n  // the component compilers, trimming out the empties, and returning a\n  // generated query string.\n  select: function select() {\n    var _this = this;\n\n    var sql = this.with();\n\n    var statements = components.map(function (component) {\n      return _this[component](_this);\n    });\n    sql += (0, _compact3.default)(statements).join(' ');\n    return sql;\n  },\n  pluck: function pluck() {\n    var toPluck = this.single.pluck;\n    if (toPluck.indexOf('.') !== -1) {\n      toPluck = toPluck.split('.').slice(-1)[0];\n    }\n    return {\n      sql: this.select(),\n      pluck: toPluck\n    };\n  },\n\n\n  // Compiles an \"insert\" query, allowing for multiple\n  // inserts using a single query statement.\n  insert: function insert() {\n    var insertValues = this.single.insert || [];\n    var sql = this.with() + ('insert into ' + this.tableName + ' ');\n    if (Array.isArray(insertValues)) {\n      if (insertValues.length === 0) {\n        return '';\n      }\n    } else if ((typeof insertValues === 'undefined' ? 'undefined' : (0, _typeof3.default)(insertValues)) === 'object' && (0, _isEmpty3.default)(insertValues)) {\n      return sql + this._emptyInsertValue;\n    }\n\n    var insertData = this._prepInsert(insertValues);\n    if (typeof insertData === 'string') {\n      sql += insertData;\n    } else {\n      if (insertData.columns.length) {\n        sql += '(' + this.formatter.columnize(insertData.columns);\n        sql += ') values (';\n        var i = -1;\n        while (++i < insertData.values.length) {\n          if (i !== 0) sql += '), (';\n          sql += this.formatter.parameterize(insertData.values[i], this.client.valueForUndefined);\n        }\n        sql += ')';\n      } else if (insertValues.length === 1 && insertValues[0]) {\n        sql += this._emptyInsertValue;\n      } else {\n        sql = '';\n      }\n    }\n    return sql;\n  },\n\n\n  // Compiles the \"update\" query.\n  update: function update() {\n    // Make sure tableName is processed by the formatter first.\n    var tableName = this.tableName;\n\n    var updateData = this._prepUpdate(this.single.update);\n    var wheres = this.where();\n    return this.with() + ('update ' + (this.single.only ? 'only ' : '') + tableName) + ' set ' + updateData.join(', ') + (wheres ? ' ' + wheres : '');\n  },\n\n\n  // Compiles the columns in the query, specifying if an item was distinct.\n  columns: function columns() {\n    var distinct = false;\n    if (this.onlyUnions()) return '';\n    var columns = this.grouped.columns || [];\n    var i = -1,\n        sql = [];\n    if (columns) {\n      while (++i < columns.length) {\n        var stmt = columns[i];\n        if (stmt.distinct) distinct = true;\n        if (stmt.type === 'aggregate') {\n          sql.push(this.aggregate(stmt));\n        } else if (stmt.value && stmt.value.length > 0) {\n          sql.push(this.formatter.columnize(stmt.value));\n        }\n      }\n    }\n    if (sql.length === 0) sql = ['*'];\n    return 'select ' + (distinct ? 'distinct ' : '') + sql.join(', ') + (this.tableName ? ' from ' + (this.single.only ? 'only ' : '') + this.tableName : '');\n  },\n  aggregate: function aggregate(stmt) {\n    var val = stmt.value;\n    var splitOn = val.toLowerCase().indexOf(' as ');\n    var distinct = stmt.aggregateDistinct ? 'distinct ' : '';\n    // Allows us to speciy an alias for the aggregate types.\n    if (splitOn !== -1) {\n      var col = val.slice(0, splitOn);\n      var alias = val.slice(splitOn + 4);\n      return stmt.method + '(' + (distinct + this.formatter.wrap(col)) + ') ' + ('as ' + this.formatter.wrap(alias));\n    }\n    return stmt.method + '(' + (distinct + this.formatter.wrap(val)) + ')';\n  },\n\n\n  // Compiles all each of the `join` clauses on the query,\n  // including any nested join queries.\n  join: function join() {\n    var sql = '';\n    var i = -1;\n    var joins = this.grouped.join;\n    if (!joins) return '';\n    while (++i < joins.length) {\n      var join = joins[i];\n      var table = join.schema ? join.schema + '.' + join.table : join.table;\n      if (i > 0) sql += ' ';\n      if (join.joinType === 'raw') {\n        sql += this.formatter.unwrapRaw(join.table);\n      } else {\n        sql += join.joinType + ' join ' + this.formatter.wrap(table);\n        var ii = -1;\n        while (++ii < join.clauses.length) {\n          var clause = join.clauses[ii];\n          if (ii > 0) {\n            sql += ' ' + clause.bool + ' ';\n          } else {\n            sql += ' ' + (clause.type === 'onUsing' ? 'using' : 'on') + ' ';\n          }\n          var val = this[clause.type].call(this, clause);\n          if (val) {\n            sql += val;\n          }\n        }\n      }\n    }\n    return sql;\n  },\n  onBetween: function onBetween(statement) {\n    return this.formatter.wrap(statement.column) + ' ' + this._not(statement, 'between') + ' ' + (0, _map3.default)(statement.value, (0, _bind3.default)(this.formatter.parameter, this.formatter)).join(' and ');\n  },\n  onNull: function onNull(statement) {\n    return this.formatter.wrap(statement.column) + ' is ' + this._not(statement, 'null');\n  },\n  onExists: function onExists(statement) {\n    return this._not(statement, 'exists') + ' (' + this.formatter.rawOrFn(statement.value) + ')';\n  },\n  onIn: function onIn(statement) {\n    if (Array.isArray(statement.column)) return this.multiOnIn(statement);\n    return this.formatter.wrap(statement.column) + ' ' + this._not(statement, 'in ') + this.wrap(this.formatter.parameterize(statement.value));\n  },\n  multiOnIn: function multiOnIn(statement) {\n    var i = -1,\n        sql = '(' + this.formatter.columnize(statement.column) + ') ';\n    sql += this._not(statement, 'in ') + '((';\n    while (++i < statement.value.length) {\n      if (i !== 0) sql += '),(';\n      sql += this.formatter.parameterize(statement.value[i]);\n    }\n    return sql + '))';\n  },\n\n\n  // Compiles all `where` statements on the query.\n  where: function where() {\n    var wheres = this.grouped.where;\n    if (!wheres) return;\n    var sql = [];\n    var i = -1;\n    while (++i < wheres.length) {\n      var stmt = wheres[i];\n      if (stmt.hasOwnProperty('value') && helpers.containsUndefined(stmt.value)) {\n        this._undefinedInWhereClause = true;\n      }\n      var val = this[stmt.type](stmt);\n      if (val) {\n        if (sql.length === 0) {\n          sql[0] = 'where';\n        } else {\n          sql.push(stmt.bool);\n        }\n        sql.push(val);\n      }\n    }\n    return sql.length > 1 ? sql.join(' ') : '';\n  },\n  group: function group() {\n    return this._groupsOrders('group');\n  },\n  order: function order() {\n    return this._groupsOrders('order');\n  },\n\n\n  // Compiles the `having` statements.\n  having: function having() {\n    var havings = this.grouped.having;\n    if (!havings) return '';\n    var sql = ['having'];\n    for (var i = 0, l = havings.length; i < l; i++) {\n      var s = havings[i];\n      var val = this[s.type](s);\n      if (val) {\n        if (sql.length === 0) {\n          sql[0] = 'where';\n        }\n        if (sql.length > 1 || sql.length === 1 && sql[0] !== 'having') {\n          sql.push(s.bool);\n        }\n        sql.push(val);\n      }\n    }\n    return sql.length > 1 ? sql.join(' ') : '';\n  },\n  havingRaw: function havingRaw(statement) {\n    return this._not(statement, '') + this.formatter.unwrapRaw(statement.value);\n  },\n  havingWrapped: function havingWrapped(statement) {\n    var val = this.formatter.rawOrFn(statement.value, 'where');\n    return val && this._not(statement, '') + '(' + val.slice(6) + ')' || '';\n  },\n  havingBasic: function havingBasic(statement) {\n    return this._not(statement, '') + this.formatter.wrap(statement.column) + ' ' + this.formatter.operator(statement.operator) + ' ' + this.formatter.parameter(statement.value);\n  },\n  havingNull: function havingNull(statement) {\n    return this.formatter.wrap(statement.column) + ' is ' + this._not(statement, 'null');\n  },\n  havingExists: function havingExists(statement) {\n    return this._not(statement, 'exists') + ' (' + this.formatter.rawOrFn(statement.value) + ')';\n  },\n  havingBetween: function havingBetween(statement) {\n    return this.formatter.wrap(statement.column) + ' ' + this._not(statement, 'between') + ' ' + (0, _map3.default)(statement.value, (0, _bind3.default)(this.formatter.parameter, this.formatter)).join(' and ');\n  },\n  havingIn: function havingIn(statement) {\n    if (Array.isArray(statement.column)) return this.multiHavingIn(statement);\n    return this.formatter.wrap(statement.column) + ' ' + this._not(statement, 'in ') + this.wrap(this.formatter.parameterize(statement.value));\n  },\n  multiHavingIn: function multiHavingIn(statement) {\n    var i = -1,\n        sql = '(' + this.formatter.columnize(statement.column) + ') ';\n    sql += this._not(statement, 'in ') + '((';\n    while (++i < statement.value.length) {\n      if (i !== 0) sql += '),(';\n      sql += this.formatter.parameterize(statement.value[i]);\n    }\n    return sql + '))';\n  },\n\n\n  // Compile the \"union\" queries attached to the main query.\n  union: function union() {\n    var onlyUnions = this.onlyUnions();\n    var unions = this.grouped.union;\n    if (!unions) return '';\n    var sql = '';\n    for (var i = 0, l = unions.length; i < l; i++) {\n      var union = unions[i];\n      if (i > 0) sql += ' ';\n      if (i > 0 || !onlyUnions) sql += union.clause + ' ';\n      var statement = this.formatter.rawOrFn(union.value);\n      if (statement) {\n        if (union.wrap) sql += '(';\n        sql += statement;\n        if (union.wrap) sql += ')';\n      }\n    }\n    return sql;\n  },\n\n\n  // If we haven't specified any columns or a `tableName`, we're assuming this\n  // is only being used for unions.\n  onlyUnions: function onlyUnions() {\n    return !this.grouped.columns && this.grouped.union && !this.tableName;\n  },\n  limit: function limit() {\n    var noLimit = !this.single.limit && this.single.limit !== 0;\n    if (noLimit) return '';\n    return 'limit ' + this.formatter.parameter(this.single.limit);\n  },\n  offset: function offset() {\n    if (!this.single.offset) return '';\n    return 'offset ' + this.formatter.parameter(this.single.offset);\n  },\n\n\n  // Compiles a `delete` query.\n  del: function del() {\n    // Make sure tableName is processed by the formatter first.\n    var tableName = this.tableName;\n\n    var wheres = this.where();\n    return this.with() + ('delete from ' + (this.single.only ? 'only ' : '') + tableName) + (wheres ? ' ' + wheres : '');\n  },\n\n\n  // Compiles a `truncate` query.\n  truncate: function truncate() {\n    return 'truncate ' + this.tableName;\n  },\n\n\n  // Compiles the \"locks\".\n  lock: function lock() {\n    if (this.single.lock) {\n      if (!this.client.transacting) {\n        helpers.warn('You are attempting to perform a \"lock\" command outside of a transaction.');\n      } else {\n        return this[this.single.lock]();\n      }\n    }\n  },\n\n\n  // Compile the \"counter\".\n  counter: function counter() {\n    var counter = this.single.counter;\n\n    var toUpdate = {};\n    toUpdate[counter.column] = this.client.raw(this.formatter.wrap(counter.column) + ' ' + (counter.symbol || '+') + ' ' + counter.amount);\n    this.single.update = toUpdate;\n    return this.update();\n  },\n\n\n  // On Clause\n  // ------\n\n  onWrapped: function onWrapped(clause) {\n    var self = this;\n\n    var wrapJoin = new _joinclause2.default();\n    clause.value.call(wrapJoin, wrapJoin);\n\n    var sql = '';\n    wrapJoin.clauses.forEach(function (wrapClause, ii) {\n      if (ii > 0) {\n        sql += ' ' + wrapClause.bool + ' ';\n      }\n      var val = self[wrapClause.type](wrapClause);\n      if (val) {\n        sql += val;\n      }\n    });\n\n    if (sql.length) {\n      return '(' + sql + ')';\n    }\n    return '';\n  },\n  onBasic: function onBasic(clause) {\n    return this.formatter.wrap(clause.column) + ' ' + this.formatter.operator(clause.operator) + ' ' + this.formatter.wrap(clause.value);\n  },\n  onRaw: function onRaw(clause) {\n    return this.formatter.unwrapRaw(clause.value);\n  },\n  onUsing: function onUsing(clause) {\n    return this.formatter.wrap(clause.column);\n  },\n\n\n  // Where Clause\n  // ------\n\n  whereIn: function whereIn(statement) {\n    if (Array.isArray(statement.column)) return this.multiWhereIn(statement);\n    return this.formatter.wrap(statement.column) + ' ' + this._not(statement, 'in ') + this.wrap(this.formatter.parameterize(statement.value));\n  },\n  multiWhereIn: function multiWhereIn(statement) {\n    var i = -1,\n        sql = '(' + this.formatter.columnize(statement.column) + ') ';\n    sql += this._not(statement, 'in ') + '((';\n    while (++i < statement.value.length) {\n      if (i !== 0) sql += '),(';\n      sql += this.formatter.parameterize(statement.value[i]);\n    }\n    return sql + '))';\n  },\n  whereNull: function whereNull(statement) {\n    return this.formatter.wrap(statement.column) + ' is ' + this._not(statement, 'null');\n  },\n\n\n  // Compiles a basic \"where\" clause.\n  whereBasic: function whereBasic(statement) {\n    return this._not(statement, '') + this.formatter.wrap(statement.column) + ' ' + this.formatter.operator(statement.operator) + ' ' + this.formatter.parameter(statement.value);\n  },\n  whereExists: function whereExists(statement) {\n    return this._not(statement, 'exists') + ' (' + this.formatter.rawOrFn(statement.value) + ')';\n  },\n  whereWrapped: function whereWrapped(statement) {\n    var val = this.formatter.rawOrFn(statement.value, 'where');\n    return val && this._not(statement, '') + '(' + val.slice(6) + ')' || '';\n  },\n  whereBetween: function whereBetween(statement) {\n    return this.formatter.wrap(statement.column) + ' ' + this._not(statement, 'between') + ' ' + (0, _map3.default)(statement.value, (0, _bind3.default)(this.formatter.parameter, this.formatter)).join(' and ');\n  },\n\n\n  // Compiles a \"whereRaw\" query.\n  whereRaw: function whereRaw(statement) {\n    return this._not(statement, '') + this.formatter.unwrapRaw(statement.value);\n  },\n  wrap: function wrap(str) {\n    if (str.charAt(0) !== '(') return '(' + str + ')';\n    return str;\n  },\n\n\n  // Compiles all `with` statements on the query.\n  with: function _with() {\n    if (!this.grouped.with || !this.grouped.with.length) {\n      return '';\n    }\n    var withs = this.grouped.with;\n    if (!withs) return;\n    var sql = [];\n    var i = -1;\n    while (++i < withs.length) {\n      var stmt = withs[i];\n      var val = this[stmt.type](stmt);\n      sql.push(val);\n    }\n    return 'with ' + sql.join(', ') + ' ';\n  },\n  withWrapped: function withWrapped(statement) {\n    var val = this.formatter.rawOrFn(statement.value);\n    return val && this.formatter.columnize(statement.alias) + ' as (' + val + ')' || '';\n  },\n  withRaw: function withRaw(statement) {\n    return this.formatter.columnize(statement.alias) + ' as (' + this.formatter.unwrapRaw(statement.value) + ')';\n  },\n\n\n  // Determines whether to add a \"not\" prefix to the where clause.\n  _not: function _not(statement, str) {\n    if (statement.not) return 'not ' + str;\n    return str;\n  },\n  _prepInsert: function _prepInsert(data) {\n    var isRaw = this.formatter.rawOrFn(data);\n    if (isRaw) return isRaw;\n    var columns = [];\n    var values = [];\n    if (!Array.isArray(data)) data = data ? [data] : [];\n    var i = -1;\n    while (++i < data.length) {\n      if (data[i] == null) break;\n      if (i === 0) columns = (0, _keys2.default)(data[i]).sort();\n      var row = new Array(columns.length);\n      var keys = (0, _keys2.default)(data[i]);\n      var j = -1;\n      while (++j < keys.length) {\n        var key = keys[j];\n        var idx = columns.indexOf(key);\n        if (idx === -1) {\n          columns = columns.concat(key).sort();\n          idx = columns.indexOf(key);\n          var k = -1;\n          while (++k < values.length) {\n            values[k].splice(idx, 0, undefined);\n          }\n          row.splice(idx, 0, undefined);\n        }\n        row[idx] = data[i][key];\n      }\n      values.push(row);\n    }\n    return {\n      columns: columns,\n      values: values\n    };\n  },\n\n\n  // \"Preps\" the update.\n  _prepUpdate: function _prepUpdate(data) {\n    data = (0, _omitBy3.default)(data, _isUndefined3.default);\n    var vals = [];\n    var sorted = (0, _keys2.default)(data).sort();\n    var i = -1;\n    while (++i < sorted.length) {\n      vals.push(this.formatter.wrap(sorted[i]) + ' = ' + this.formatter.parameter(data[sorted[i]]));\n    }\n    return vals;\n  },\n\n\n  // Compiles the `order by` statements.\n  _groupsOrders: function _groupsOrders(type) {\n    var items = this.grouped[type];\n    if (!items) return '';\n    var formatter = this.formatter;\n\n    var sql = items.map(function (item) {\n      var column = item.value instanceof _raw2.default ? formatter.unwrapRaw(item.value) : formatter.columnize(item.value);\n      var direction = type === 'order' && item.type !== 'orderByRaw' ? ' ' + formatter.direction(item.direction) : '';\n      return column + direction;\n    });\n    return sql.length ? type + ' by ' + sql.join(', ') : '';\n  }\n});\n\nQueryCompiler.prototype.first = QueryCompiler.prototype.select;\n\n// Get the table name, wrapping it if necessary.\n// Implemented as a property to prevent ordering issues as described in #704.\nObject.defineProperty(QueryCompiler.prototype, 'tableName', {\n  get: function get() {\n    if (!this._tableName) {\n      // Only call this.formatter.wrap() the first time this property is accessed.\n      var tableName = this.single.table;\n      var schemaName = this.single.schema;\n\n      if (tableName && schemaName) tableName = schemaName + '.' + tableName;\n\n      this._tableName = tableName ? this.formatter.wrap(tableName) : '';\n    }\n    return this._tableName;\n  }\n});\n\nexports.default = QueryCompiler;\nmodule.exports = exports['default'];","/home/travis/build/npmtest/node-npmtest-knex/knex/lib/schema/builder.js":"'use strict';\n\nexports.__esModule = true;\n\nvar _toArray2 = require('lodash/toArray');\n\nvar _toArray3 = _interopRequireDefault(_toArray2);\n\nvar _each2 = require('lodash/each');\n\nvar _each3 = _interopRequireDefault(_each2);\n\nvar _inherits = require('inherits');\n\nvar _inherits2 = _interopRequireDefault(_inherits);\n\nvar _events = require('events');\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n// Constructor for the builder instance, typically called from\n// `knex.builder`, accepting the current `knex` instance,\n// and pulling out the `client` and `grammar` from the current\n// knex instance.\nfunction SchemaBuilder(client) {\n  this.client = client;\n  this._sequence = [];\n  this._debug = client.config && client.config.debug;\n}\n(0, _inherits2.default)(SchemaBuilder, _events.EventEmitter);\n\n// Each of the schema builder methods just add to the\n// \"_sequence\" array for consistency.\n(0, _each3.default)(['createTable', 'createTableIfNotExists', 'createSchema', 'createSchemaIfNotExists', 'dropSchema', 'dropSchemaIfExists', 'createExtension', 'createExtensionIfNotExists', 'dropExtension', 'dropExtensionIfExists', 'table', 'alterTable', 'hasTable', 'hasColumn', 'dropTable', 'renameTable', 'dropTableIfExists', 'raw'], function (method) {\n  SchemaBuilder.prototype[method] = function () {\n    if (method === 'table') method = 'alterTable';\n    this._sequence.push({\n      method: method,\n      args: (0, _toArray3.default)(arguments)\n    });\n    return this;\n  };\n});\n\nrequire('../interface')(SchemaBuilder);\n\nSchemaBuilder.prototype.withSchema = function (schemaName) {\n  this._schema = schemaName;\n  return this;\n};\n\nSchemaBuilder.prototype.toString = function () {\n  return this.toQuery();\n};\n\nSchemaBuilder.prototype.toSQL = function () {\n  return this.client.schemaCompiler(this).toSQL();\n};\n\nexports.default = SchemaBuilder;\nmodule.exports = exports['default'];","/home/travis/build/npmtest/node-npmtest-knex/knex/lib/schema/compiler.js":"'use strict';\n\nexports.__esModule = true;\n\nvar _assign2 = require('lodash/assign');\n\nvar _assign3 = _interopRequireDefault(_assign2);\n\nvar _helpers = require('./helpers');\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n// The \"SchemaCompiler\" takes all of the query statements which have been\n// gathered in the \"SchemaBuilder\" and turns them into an array of\n// properly formatted / bound query strings.\nfunction SchemaCompiler(client, builder) {\n  this.builder = builder;\n  this.client = client;\n  this.schema = builder._schema;\n  this.formatter = client.formatter();\n  this.sequence = [];\n}\n\n(0, _assign3.default)(SchemaCompiler.prototype, {\n\n  pushQuery: _helpers.pushQuery,\n\n  pushAdditional: _helpers.pushAdditional,\n\n  createTable: buildTable('create'),\n\n  createTableIfNotExists: buildTable('createIfNot'),\n\n  alterTable: buildTable('alter'),\n\n  dropTablePrefix: 'drop table ',\n\n  dropTable: function dropTable(tableName) {\n    this.pushQuery(this.dropTablePrefix + this.formatter.wrap(prefixedTableName(this.schema, tableName)));\n  },\n  dropTableIfExists: function dropTableIfExists(tableName) {\n    this.pushQuery(this.dropTablePrefix + 'if exists ' + this.formatter.wrap(prefixedTableName(this.schema, tableName)));\n  },\n  raw: function raw(sql, bindings) {\n    this.sequence.push(this.client.raw(sql, bindings).toSQL());\n  },\n  toSQL: function toSQL() {\n    var sequence = this.builder._sequence;\n    for (var i = 0, l = sequence.length; i < l; i++) {\n      var query = sequence[i];\n      this[query.method].apply(this, query.args);\n    }\n    return this.sequence;\n  }\n});\n\nfunction buildTable(type) {\n  return function (tableName, fn) {\n    var builder = this.client.tableBuilder(type, tableName, fn);\n\n    builder.setSchema(this.schema);\n    var sql = builder.toSQL();\n\n    for (var i = 0, l = sql.length; i < l; i++) {\n      this.sequence.push(sql[i]);\n    }\n  };\n}\n\nfunction prefixedTableName(prefix, table) {\n  return prefix ? prefix + '.' + table : table;\n}\n\nexports.default = SchemaCompiler;\nmodule.exports = exports['default'];","/home/travis/build/npmtest/node-npmtest-knex/knex/lib/schema/helpers.js":"'use strict';\n\nexports.__esModule = true;\n\nvar _tail2 = require('lodash/tail');\n\nvar _tail3 = _interopRequireDefault(_tail2);\n\nvar _isString2 = require('lodash/isString');\n\nvar _isString3 = _interopRequireDefault(_isString2);\n\nexports.pushQuery = pushQuery;\nexports.pushAdditional = pushAdditional;\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n// Push a new query onto the compiled \"sequence\" stack,\n// creating a new formatter, returning the compiler.\nfunction pushQuery(query) {\n  if (!query) return;\n  if ((0, _isString3.default)(query)) {\n    query = { sql: query };\n  }\n  if (!query.bindings) {\n    query.bindings = this.formatter.bindings;\n  }\n  this.sequence.push(query);\n  this.formatter = this.client.formatter();\n}\n\n// Used in cases where we need to push some additional column specific statements.\nfunction pushAdditional(fn) {\n  var child = new this.constructor(this.client, this.tableCompiler, this.columnBuilder);\n  fn.call(child, (0, _tail3.default)(arguments));\n  this.sequence.additional = (this.sequence.additional || []).concat(child.sequence);\n}","/home/travis/build/npmtest/node-npmtest-knex/knex/lib/schema/tablebuilder.js":"'use strict';\n\nexports.__esModule = true;\n\nvar _typeof2 = require('babel-runtime/helpers/typeof');\n\nvar _typeof3 = _interopRequireDefault(_typeof2);\n\nvar _isFunction2 = require('lodash/isFunction');\n\nvar _isFunction3 = _interopRequireDefault(_isFunction2);\n\nvar _isString2 = require('lodash/isString');\n\nvar _isString3 = _interopRequireDefault(_isString2);\n\nvar _toArray2 = require('lodash/toArray');\n\nvar _toArray3 = _interopRequireDefault(_toArray2);\n\nvar _each2 = require('lodash/each');\n\nvar _each3 = _interopRequireDefault(_each2);\n\nvar _extend2 = require('lodash/extend');\n\nvar _extend3 = _interopRequireDefault(_extend2);\n\nvar _helpers = require('../helpers');\n\nvar helpers = _interopRequireWildcard(_helpers);\n\nfunction _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction TableBuilder(client, method, tableName, fn) {\n  this.client = client;\n  this._fn = fn;\n  this._method = method;\n  this._schemaName = undefined;\n  this._tableName = tableName;\n  this._statements = [];\n  this._single = {};\n\n  if (!(0, _isFunction3.default)(this._fn)) {\n    throw new TypeError('A callback function must be supplied to calls against `.createTable` ' + 'and `.table`');\n  }\n}\n// TableBuilder\n\n// Takes the function passed to the \"createTable\" or \"table/editTable\"\n// functions and calls it with the \"TableBuilder\" as both the context and\n// the first argument. Inside this function we can specify what happens to the\n// method, pushing everything we want to do onto the \"allStatements\" array,\n// which is then compiled into sql.\n// ------\n\n\nTableBuilder.prototype.setSchema = function (schemaName) {\n  this._schemaName = schemaName;\n};\n\n// Convert the current tableBuilder object \"toSQL\"\n// giving us additional methods if we're altering\n// rather than creating the table.\nTableBuilder.prototype.toSQL = function () {\n  if (this._method === 'alter') {\n    (0, _extend3.default)(this, AlterMethods);\n  }\n  this._fn.call(this, this);\n  return this.client.tableCompiler(this).toSQL();\n};\n\n(0, _each3.default)([\n\n// Each of the index methods can be called individually, with the\n// column name to be used, e.g. table.unique('column').\n'index', 'primary', 'unique',\n\n// Key specific\n'dropPrimary', 'dropUnique', 'dropIndex', 'dropForeign'], function (method) {\n  TableBuilder.prototype[method] = function () {\n    this._statements.push({\n      grouping: 'alterTable',\n      method: method,\n      args: (0, _toArray3.default)(arguments)\n    });\n    return this;\n  };\n});\n\n// Warn for dialect-specific table methods, since that's the\n// only time these are supported.\nvar specialMethods = {\n  mysql: ['engine', 'charset', 'collate'],\n  postgresql: ['inherits']\n};\n(0, _each3.default)(specialMethods, function (methods, dialect) {\n  (0, _each3.default)(methods, function (method) {\n    TableBuilder.prototype[method] = function (value) {\n      if (this.client.dialect !== dialect) {\n        helpers.warn('Knex only supports ' + method + ' statement with ' + dialect + '.');\n      }\n      if (this._method === 'alter') {\n        helpers.warn('Knex does not support altering the ' + method + ' outside of create ' + 'table, please use knex.raw statement.');\n      }\n      this._single[method] = value;\n    };\n  });\n});\n\n// Each of the column types that we can add, we create a new ColumnBuilder\n// instance and push it onto the statements array.\nvar columnTypes = [\n\n// Numeric\n'tinyint', 'smallint', 'mediumint', 'int', 'bigint', 'decimal', 'float', 'double', 'real', 'bit', 'boolean', 'serial',\n\n// Date / Time\n'date', 'datetime', 'timestamp', 'time', 'year',\n\n// String\n'char', 'varchar', 'tinytext', 'tinyText', 'text', 'mediumtext', 'mediumText', 'longtext', 'longText', 'binary', 'varbinary', 'tinyblob', 'tinyBlob', 'mediumblob', 'mediumBlob', 'blob', 'longblob', 'longBlob', 'enum', 'set',\n\n// Increments, Aliases, and Additional\n'bool', 'dateTime', 'increments', 'bigincrements', 'bigIncrements', 'integer', 'biginteger', 'bigInteger', 'string', 'json', 'jsonb', 'uuid', 'enu', 'specificType'];\n\n// For each of the column methods, create a new \"ColumnBuilder\" interface,\n// push it onto the \"allStatements\" stack, and then return the interface,\n// with which we can add indexes, etc.\n(0, _each3.default)(columnTypes, function (type) {\n  TableBuilder.prototype[type] = function () {\n    var args = (0, _toArray3.default)(arguments);\n    var builder = this.client.columnBuilder(this, type, args);\n    this._statements.push({\n      grouping: 'columns',\n      builder: builder\n    });\n    return builder;\n  };\n});\n\n// The \"timestamps\" call is really just sets the `created_at` and `updated_at` columns.\nTableBuilder.prototype.timestamps = function timestamps() {\n  var method = arguments[0] === true ? 'timestamp' : 'datetime';\n  var createdAt = this[method]('created_at');\n  var updatedAt = this[method]('updated_at');\n  if (arguments[1] === true) {\n    var now = this.client.raw('CURRENT_TIMESTAMP');\n    createdAt.notNullable().defaultTo(now);\n    updatedAt.notNullable().defaultTo(now);\n  }\n  return;\n};\n\n// Set the comment value for a table, they're only allowed to be called\n// once per table.\nTableBuilder.prototype.comment = function (value) {\n  this._single.comment = value;\n};\n\n// Set a foreign key on the table, calling\n// `table.foreign('column_name').references('column').on('table').onDelete()...\n// Also called from the ColumnBuilder context when chaining.\nTableBuilder.prototype.foreign = function (column, keyName) {\n  var foreignData = { column: column, keyName: keyName };\n  this._statements.push({\n    grouping: 'alterTable',\n    method: 'foreign',\n    args: [foreignData]\n  });\n  var returnObj = {\n    references: function references(tableColumn) {\n      var pieces = void 0;\n      if ((0, _isString3.default)(tableColumn)) {\n        pieces = tableColumn.split('.');\n      }\n      if (!pieces || pieces.length === 1) {\n        foreignData.references = pieces ? pieces[0] : tableColumn;\n        return {\n          on: function on(tableName) {\n            if (typeof tableName !== 'string') {\n              throw new TypeError('Expected tableName to be a string, got: ' + (typeof tableName === 'undefined' ? 'undefined' : (0, _typeof3.default)(tableName)));\n            }\n            foreignData.inTable = tableName;\n            return returnObj;\n          },\n          inTable: function inTable() {\n            return this.on.apply(this, arguments);\n          }\n        };\n      }\n      foreignData.inTable = pieces[0];\n      foreignData.references = pieces[1];\n      return returnObj;\n    },\n    withKeyName: function withKeyName(keyName) {\n      foreignData.keyName = keyName;\n      return returnObj;\n    },\n    onUpdate: function onUpdate(statement) {\n      foreignData.onUpdate = statement;\n      return returnObj;\n    },\n    onDelete: function onDelete(statement) {\n      foreignData.onDelete = statement;\n      return returnObj;\n    },\n    _columnBuilder: function _columnBuilder(builder) {\n      (0, _extend3.default)(builder, returnObj);\n      returnObj = builder;\n      return builder;\n    }\n  };\n  return returnObj;\n};\n\nvar AlterMethods = {\n\n  // Renames the current column `from` the current\n  // TODO: this.column(from).rename(to)\n  renameColumn: function renameColumn(from, to) {\n    this._statements.push({\n      grouping: 'alterTable',\n      method: 'renameColumn',\n      args: [from, to]\n    });\n    return this;\n  },\n  dropTimestamps: function dropTimestamps() {\n    return this.dropColumns(['created_at', 'updated_at']);\n  }\n\n  // TODO: changeType\n\n};\n\n// Drop a column from the current table.\n// TODO: Enable this.column(columnName).drop();\nAlterMethods.dropColumn = AlterMethods.dropColumns = function () {\n  this._statements.push({\n    grouping: 'alterTable',\n    method: 'dropColumn',\n    args: (0, _toArray3.default)(arguments)\n  });\n  return this;\n};\n\nexports.default = TableBuilder;\nmodule.exports = exports['default'];","/home/travis/build/npmtest/node-npmtest-knex/knex/lib/schema/tablecompiler.js":"'use strict';\n\nexports.__esModule = true;\n\nvar _getIterator2 = require('babel-runtime/core-js/get-iterator');\n\nvar _getIterator3 = _interopRequireDefault(_getIterator2);\n\nvar _isArray3 = require('lodash/isArray');\n\nvar _isArray4 = _interopRequireDefault(_isArray3);\n\nvar _indexOf2 = require('lodash/indexOf');\n\nvar _indexOf3 = _interopRequireDefault(_indexOf2);\n\nvar _isEmpty2 = require('lodash/isEmpty');\n\nvar _isEmpty3 = _interopRequireDefault(_isEmpty2);\n\nvar _tail2 = require('lodash/tail');\n\nvar _tail3 = _interopRequireDefault(_tail2);\n\nvar _first2 = require('lodash/first');\n\nvar _first3 = _interopRequireDefault(_first2);\n\nvar _map2 = require('lodash/map');\n\nvar _map3 = _interopRequireDefault(_map2);\n\nvar _reduce2 = require('lodash/reduce');\n\nvar _reduce3 = _interopRequireDefault(_reduce2);\n\nvar _groupBy2 = require('lodash/groupBy');\n\nvar _groupBy3 = _interopRequireDefault(_groupBy2);\n\nvar _helpers = require('./helpers');\n\nvar _helpers2 = require('../helpers');\n\nvar helpers = _interopRequireWildcard(_helpers2);\n\nfunction _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/* eslint max-len:0 */\n\n// Table Compiler\n// -------\nfunction TableCompiler(client, tableBuilder) {\n  this.client = client;\n  this.method = tableBuilder._method;\n  this.schemaNameRaw = tableBuilder._schemaName;\n  this.tableNameRaw = tableBuilder._tableName;\n  this.single = tableBuilder._single;\n  this.grouped = (0, _groupBy3.default)(tableBuilder._statements, 'grouping');\n  this.formatter = client.formatter();\n  this.sequence = [];\n  this._formatting = client.config && client.config.formatting;\n}\n\nTableCompiler.prototype.pushQuery = _helpers.pushQuery;\n\nTableCompiler.prototype.pushAdditional = _helpers.pushAdditional;\n\n// Convert the tableCompiler toSQL\nTableCompiler.prototype.toSQL = function () {\n  this[this.method]();\n  return this.sequence;\n};\n\nTableCompiler.prototype.lowerCase = true;\n\n// Column Compilation\n// -------\n\n// If this is a table \"creation\", we need to first run through all\n// of the columns to build them into a single string,\n// and then run through anything else and push it to the query sequence.\nTableCompiler.prototype.createAlterTableMethods = null;\nTableCompiler.prototype.create = function (ifNot) {\n  var columnBuilders = this.getColumns();\n  var columns = columnBuilders.map(function (col) {\n    return col.toSQL();\n  });\n  var columnTypes = this.getColumnTypes(columns);\n  if (this.createAlterTableMethods) {\n    this.alterTableForCreate(columnTypes);\n  }\n  this.createQuery(columnTypes, ifNot);\n  this.columnQueries(columns);\n  delete this.single.comment;\n  this.alterTable();\n};\n\n// Only create the table if it doesn't exist.\nTableCompiler.prototype.createIfNot = function () {\n  this.create(true);\n};\n\n// If we're altering the table, we need to one-by-one\n// go through and handle each of the queries associated\n// with altering the table's schema.\nTableCompiler.prototype.alter = function () {\n  var addColBuilders = this.getColumns();\n  var addColumns = addColBuilders.map(function (col) {\n    return col.toSQL();\n  });\n  var alterColBuilders = this.getColumns('alter');\n  var alterColumns = alterColBuilders.map(function (col) {\n    return col.toSQL();\n  });\n  var addColumnTypes = this.getColumnTypes(addColumns);\n  var alterColumnTypes = this.getColumnTypes(alterColumns);\n\n  this.addColumns(addColumnTypes);\n  this.alterColumns(alterColumnTypes, alterColBuilders);\n  this.columnQueries(addColumns);\n  this.columnQueries(alterColumns);\n  this.alterTable();\n};\n\nTableCompiler.prototype.foreign = function (foreignData) {\n  if (foreignData.inTable && foreignData.references) {\n    var keyName = foreignData.keyName ? this.formatter.wrap(foreignData.keyName) : this._indexCommand('foreign', this.tableNameRaw, foreignData.column);\n    var column = this.formatter.columnize(foreignData.column);\n    var references = this.formatter.columnize(foreignData.references);\n    var inTable = this.formatter.wrap(foreignData.inTable);\n    var onUpdate = foreignData.onUpdate ? (this.lowerCase ? ' on update ' : ' ON UPDATE ') + foreignData.onUpdate : '';\n    var onDelete = foreignData.onDelete ? (this.lowerCase ? ' on delete ' : ' ON DELETE ') + foreignData.onDelete : '';\n    if (this.lowerCase) {\n      this.pushQuery((!this.forCreate ? 'alter table ' + this.tableName() + ' add ' : '') + 'constraint ' + keyName + ' ' + 'foreign key (' + column + ') references ' + inTable + ' (' + references + ')' + onUpdate + onDelete);\n    } else {\n      this.pushQuery((!this.forCreate ? 'ALTER TABLE ' + this.tableName() + ' ADD ' : '') + 'CONSTRAINT ' + keyName + ' ' + 'FOREIGN KEY (' + column + ') REFERENCES ' + inTable + ' (' + references + ')' + onUpdate + onDelete);\n    }\n  }\n};\n\n// Get all of the column sql & bindings individually for building the table queries.\nTableCompiler.prototype.getColumnTypes = function (columns) {\n  return (0, _reduce3.default)((0, _map3.default)(columns, _first3.default), function (memo, column) {\n    memo.sql.push(column.sql);\n    memo.bindings.concat(column.bindings);\n    return memo;\n  }, { sql: [], bindings: [] });\n};\n\n// Adds all of the additional queries from the \"column\"\nTableCompiler.prototype.columnQueries = function (columns) {\n  var queries = (0, _reduce3.default)((0, _map3.default)(columns, _tail3.default), function (memo, column) {\n    if (!(0, _isEmpty3.default)(column)) return memo.concat(column);\n    return memo;\n  }, []);\n  for (var _iterator = queries, _isArray2 = Array.isArray(_iterator), _i = 0, _iterator = _isArray2 ? _iterator : (0, _getIterator3.default)(_iterator);;) {\n    var _ref;\n\n    if (_isArray2) {\n      if (_i >= _iterator.length) break;\n      _ref = _iterator[_i++];\n    } else {\n      _i = _iterator.next();\n      if (_i.done) break;\n      _ref = _i.value;\n    }\n\n    var q = _ref;\n\n    this.pushQuery(q);\n  }\n};\n\n// Add a new column.\nTableCompiler.prototype.addColumnsPrefix = 'add column ';\n\n// All of the columns to \"add\" for the query\nTableCompiler.prototype.addColumns = function (columns, prefix) {\n  prefix = prefix || this.addColumnsPrefix;\n\n  if (columns.sql.length > 0) {\n    var columnSql = (0, _map3.default)(columns.sql, function (column) {\n      return prefix + column;\n    });\n    this.pushQuery({\n      sql: (this.lowerCase ? 'alter table ' : 'ALTER TABLE ') + this.tableName() + ' ' + columnSql.join(', '),\n      bindings: columns.bindings\n    });\n  }\n};\n\n// Alter column\nTableCompiler.prototype.alterColumnsPrefix = 'alter column ';\n\nTableCompiler.prototype.alterColumns = function (columns, colBuilders) {\n  if (columns.sql.length > 0) {\n    this.addColumns(columns, this.alterColumnsPrefix, colBuilders);\n  }\n};\n\n// Compile the columns as needed for the current create or alter table\nTableCompiler.prototype.getColumns = function (method) {\n  var _this = this;\n\n  var columns = this.grouped.columns || [];\n  method = method || 'add';\n\n  return columns.filter(function (column) {\n    return column.builder._method === method;\n  }).map(function (column) {\n    return _this.client.columnCompiler(_this, column.builder);\n  });\n};\n\nTableCompiler.prototype.tableName = function () {\n  var name = this.schemaNameRaw ? this.schemaNameRaw + '.' + this.tableNameRaw : this.tableNameRaw;\n\n  return this.formatter.wrap(name);\n};\n\n// Generate all of the alter column statements necessary for the query.\nTableCompiler.prototype.alterTable = function () {\n  var alterTable = this.grouped.alterTable || [];\n  for (var i = 0, l = alterTable.length; i < l; i++) {\n    var statement = alterTable[i];\n    if (this[statement.method]) {\n      this[statement.method].apply(this, statement.args);\n    } else {\n      helpers.error('Debug: ' + statement.method + ' does not exist');\n    }\n  }\n  for (var item in this.single) {\n    if (typeof this[item] === 'function') this[item](this.single[item]);\n  }\n};\n\nTableCompiler.prototype.alterTableForCreate = function (columnTypes) {\n  this.forCreate = true;\n  var savedSequence = this.sequence;\n  var alterTable = this.grouped.alterTable || [];\n  this.grouped.alterTable = [];\n  for (var i = 0, l = alterTable.length; i < l; i++) {\n    var statement = alterTable[i];\n    if ((0, _indexOf3.default)(this.createAlterTableMethods, statement.method) < 0) {\n      this.grouped.alterTable.push(statement);\n      continue;\n    }\n    if (this[statement.method]) {\n      this.sequence = [];\n      this[statement.method].apply(this, statement.args);\n      columnTypes.sql.push(this.sequence[0].sql);\n    } else {\n      helpers.error('Debug: ' + statement.method + ' does not exist');\n    }\n  }\n  this.sequence = savedSequence;\n  this.forCreate = false;\n};\n\n// Drop the index on the current table.\nTableCompiler.prototype.dropIndex = function (value) {\n  this.pushQuery('drop index' + value);\n};\n\n// Drop the unique\nTableCompiler.prototype.dropUnique = TableCompiler.prototype.dropForeign = function () {\n  throw new Error('Method implemented in the dialect driver');\n};\n\nTableCompiler.prototype.dropColumnPrefix = 'drop column ';\nTableCompiler.prototype.dropColumn = function () {\n  var _this2 = this;\n\n  var columns = helpers.normalizeArr.apply(null, arguments);\n  var drops = (0, _map3.default)((0, _isArray4.default)(columns) ? columns : [columns], function (column) {\n    return _this2.dropColumnPrefix + _this2.formatter.wrap(column);\n  });\n  this.pushQuery((this.lowerCase ? 'alter table ' : 'ALTER TABLE ') + this.tableName() + ' ' + drops.join(', '));\n};\n\n// If no name was specified for this index, we will create one using a basic\n// convention of the table name, followed by the columns, followed by an\n// index type, such as primary or index, which makes the index unique.\nTableCompiler.prototype._indexCommand = function (type, tableName, columns) {\n  if (!(0, _isArray4.default)(columns)) columns = columns ? [columns] : [];\n  var table = tableName.replace(/\\.|-/g, '_');\n  var indexName = (table + '_' + columns.join('_') + '_' + type).toLowerCase();\n  return this.formatter.wrap(indexName);\n};\n\nexports.default = TableCompiler;\nmodule.exports = exports['default'];","/home/travis/build/npmtest/node-npmtest-knex/knex/lib/schema/columnbuilder.js":"'use strict';\n\nexports.__esModule = true;\n\nvar _toArray2 = require('lodash/toArray');\n\nvar _toArray3 = _interopRequireDefault(_toArray2);\n\nvar _each2 = require('lodash/each');\n\nvar _each3 = _interopRequireDefault(_each2);\n\nvar _extend2 = require('lodash/extend');\n\nvar _extend3 = _interopRequireDefault(_extend2);\n\nexports.default = ColumnBuilder;\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n// The chainable interface off the original \"column\" method.\nfunction ColumnBuilder(client, tableBuilder, type, args) {\n  this.client = client;\n  this._method = 'add';\n  this._single = {};\n  this._modifiers = {};\n  this._statements = [];\n  this._type = columnAlias[type] || type;\n  this._args = args;\n  this._tableBuilder = tableBuilder;\n\n  // If we're altering the table, extend the object\n  // with the available \"alter\" methods.\n  if (tableBuilder._method === 'alter') {\n    (0, _extend3.default)(this, AlterMethods);\n  }\n}\n\n// All of the modifier methods that can be used to modify the current query.\nvar modifiers = ['default', 'defaultsTo', 'defaultTo', 'unsigned', 'nullable', 'first', 'after', 'comment', 'collate'];\n\n// Aliases for convenience.\nvar aliasMethod = {\n  default: 'defaultTo',\n  defaultsTo: 'defaultTo'\n};\n\n// If we call any of the modifiers (index or otherwise) on the chainable, we pretend\n// as though we're calling `table.method(column)` directly.\n(0, _each3.default)(modifiers, function (method) {\n  var key = aliasMethod[method] || method;\n  ColumnBuilder.prototype[method] = function () {\n    this._modifiers[key] = (0, _toArray3.default)(arguments);\n    return this;\n  };\n});\n\nColumnBuilder.prototype.notNull = ColumnBuilder.prototype.notNullable = function notNullable() {\n  return this.nullable(false);\n};\n\n(0, _each3.default)(['index', 'primary', 'unique'], function (method) {\n  ColumnBuilder.prototype[method] = function () {\n    if (this._type.toLowerCase().indexOf('increments') === -1) {\n      this._tableBuilder[method].apply(this._tableBuilder, [this._args[0]].concat((0, _toArray3.default)(arguments)));\n    }\n    return this;\n  };\n});\n\n// Specify that the current column \"references\" a column,\n// which may be tableName.column or just \"column\"\nColumnBuilder.prototype.references = function (value) {\n  return this._tableBuilder.foreign.call(this._tableBuilder, this._args[0], undefined, this)._columnBuilder(this).references(value);\n};\n\nvar AlterMethods = {};\n\n// Specify that the column is to be dropped. This takes precedence\n// over all other rules for the column.\nAlterMethods.drop = function () {\n  this._single.drop = true;\n\n  return this;\n};\n\n// Specify the \"type\" that we're looking to set the\n// Knex takes no responsibility for any data-loss that may\n// occur when changing data types.\nAlterMethods.alterType = function (type) {\n  this._statements.push({\n    grouping: 'alterType',\n    value: type\n  });\n\n  return this;\n};\n\n// Set column method to alter (default is add).\nAlterMethods.alter = function () {\n  this._method = 'alter';\n\n  return this;\n};\n\n// Alias a few methods for clarity when processing.\nvar columnAlias = {\n  'float': 'floating',\n  'enum': 'enu',\n  'boolean': 'bool',\n  'string': 'varchar',\n  'bigint': 'bigInteger'\n};\nmodule.exports = exports['default'];","/home/travis/build/npmtest/node-npmtest-knex/knex/lib/schema/columncompiler.js":"'use strict';\n\nexports.__esModule = true;\n\nvar _stringify = require('babel-runtime/core-js/json/stringify');\n\nvar _stringify2 = _interopRequireDefault(_stringify);\n\nvar _isObject2 = require('lodash/isObject');\n\nvar _isObject3 = _interopRequireDefault(_isObject2);\n\nvar _has2 = require('lodash/has');\n\nvar _has3 = _interopRequireDefault(_has2);\n\nvar _tail2 = require('lodash/tail');\n\nvar _tail3 = _interopRequireDefault(_tail2);\n\nvar _first2 = require('lodash/first');\n\nvar _first3 = _interopRequireDefault(_first2);\n\nvar _groupBy2 = require('lodash/groupBy');\n\nvar _groupBy3 = _interopRequireDefault(_groupBy2);\n\nvar _raw = require('../raw');\n\nvar _raw2 = _interopRequireDefault(_raw);\n\nvar _helpers = require('./helpers');\n\nvar helpers = _interopRequireWildcard(_helpers);\n\nfunction _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n// Column Compiler\n// Used for designating column definitions\n// during the table \"create\" / \"alter\" statements.\n// -------\nfunction ColumnCompiler(client, tableCompiler, columnBuilder) {\n  this.client = client;\n  this.tableCompiler = tableCompiler;\n  this.columnBuilder = columnBuilder;\n  this.args = columnBuilder._args;\n  this.type = columnBuilder._type.toLowerCase();\n  this.grouped = (0, _groupBy3.default)(columnBuilder._statements, 'grouping');\n  this.modified = columnBuilder._modifiers;\n  this.isIncrements = this.type.indexOf('increments') !== -1;\n  this.formatter = client.formatter();\n  this.sequence = [];\n  this.modifiers = [];\n}\n\nColumnCompiler.prototype.pushQuery = helpers.pushQuery;\n\nColumnCompiler.prototype.pushAdditional = helpers.pushAdditional;\n\n// To convert to sql, we first go through and build the\n// column as it would be in the insert statement\nColumnCompiler.prototype.toSQL = function () {\n  this.pushQuery(this.compileColumn());\n  if (this.sequence.additional) {\n    this.sequence = this.sequence.concat(this.sequence.additional);\n  }\n  return this.sequence;\n};\n\n// Compiles a column.\nColumnCompiler.prototype.compileColumn = function () {\n  return this.formatter.wrap(this.getColumnName()) + ' ' + this.getColumnType() + this.getModifiers();\n};\n\n// Assumes the autoincrementing key is named `id` if not otherwise specified.\nColumnCompiler.prototype.getColumnName = function () {\n  var value = (0, _first3.default)(this.args);\n  if (value) return value;\n  if (this.isIncrements) {\n    return 'id';\n  } else {\n    throw new Error('You did not specify a column name for the ' + this.type + 'column.');\n  }\n};\n\nColumnCompiler.prototype.getColumnType = function () {\n  var type = this[this.type];\n  return typeof type === 'function' ? type.apply(this, (0, _tail3.default)(this.args)) : type;\n};\n\nColumnCompiler.prototype.getModifiers = function () {\n  var modifiers = [];\n  if (this.type.indexOf('increments') === -1) {\n    for (var i = 0, l = this.modifiers.length; i < l; i++) {\n      var modifier = this.modifiers[i];\n      if ((0, _has3.default)(this.modified, modifier)) {\n        var val = this[modifier].apply(this, this.modified[modifier]);\n        if (val) modifiers.push(val);\n      }\n    }\n  }\n  return modifiers.length > 0 ? ' ' + modifiers.join(' ') : '';\n};\n\n// Types\n// ------\n\nColumnCompiler.prototype.increments = 'integer not null primary key autoincrement';\nColumnCompiler.prototype.bigincrements = 'integer not null primary key autoincrement';\nColumnCompiler.prototype.integer = ColumnCompiler.prototype.smallint = ColumnCompiler.prototype.mediumint = 'integer';\nColumnCompiler.prototype.biginteger = 'bigint';\nColumnCompiler.prototype.varchar = function (length) {\n  return 'varchar(' + this._num(length, 255) + ')';\n};\nColumnCompiler.prototype.text = 'text';\nColumnCompiler.prototype.tinyint = 'tinyint';\nColumnCompiler.prototype.floating = function (precision, scale) {\n  return 'float(' + this._num(precision, 8) + ', ' + this._num(scale, 2) + ')';\n};\nColumnCompiler.prototype.decimal = function (precision, scale) {\n  return 'decimal(' + this._num(precision, 8) + ', ' + this._num(scale, 2) + ')';\n};\nColumnCompiler.prototype.binary = 'blob';\nColumnCompiler.prototype.bool = 'boolean';\nColumnCompiler.prototype.date = 'date';\nColumnCompiler.prototype.datetime = 'datetime';\nColumnCompiler.prototype.time = 'time';\nColumnCompiler.prototype.timestamp = 'timestamp';\nColumnCompiler.prototype.enu = 'varchar';\n\nColumnCompiler.prototype.bit = ColumnCompiler.prototype.json = 'text';\n\nColumnCompiler.prototype.uuid = 'char(36)';\nColumnCompiler.prototype.specifictype = function (type) {\n  return type;\n};\n\n// Modifiers\n// -------\n\nColumnCompiler.prototype.nullable = function (nullable) {\n  return nullable === false ? 'not null' : 'null';\n};\nColumnCompiler.prototype.notNullable = function () {\n  return this.nullable(false);\n};\nColumnCompiler.prototype.defaultTo = function (value) {\n  if (value === void 0) {\n    return '';\n  } else if (value === null) {\n    value = \"null\";\n  } else if (value instanceof _raw2.default) {\n    value = value.toQuery();\n  } else if (this.type === 'bool') {\n    if (value === 'false') value = 0;\n    value = '\\'' + (value ? 1 : 0) + '\\'';\n  } else if (this.type === 'json' && (0, _isObject3.default)(value)) {\n    return (0, _stringify2.default)(value);\n  } else {\n    value = '\\'' + value + '\\'';\n  }\n  return 'default ' + value;\n};\nColumnCompiler.prototype._num = function (val, fallback) {\n  if (val === undefined || val === null) return fallback;\n  var number = parseInt(val, 10);\n  return isNaN(number) ? fallback : number;\n};\n\nexports.default = ColumnCompiler;\nmodule.exports = exports['default'];","/home/travis/build/npmtest/node-npmtest-knex/knex/lib/query/string.js":"'use strict';\n\nexports.__esModule = true;\nexports.charsMap = exports.charsRegex = undefined;\n\nvar _stringify = require('babel-runtime/core-js/json/stringify');\n\nvar _stringify2 = _interopRequireDefault(_stringify);\n\nvar _typeof2 = require('babel-runtime/helpers/typeof');\n\nvar _typeof3 = _interopRequireDefault(_typeof2);\n\nexports.makeEscape = makeEscape;\nexports.escapeObject = escapeObject;\nexports.arrayToList = arrayToList;\nexports.bufferToString = bufferToString;\nexports.escapeString = escapeString;\nexports.dateToString = dateToString;\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/*eslint max-len: 0, no-var:0 */\n\nvar charsRegex = exports.charsRegex = /[\\0\\b\\t\\n\\r\\x1a\\\"\\'\\\\]/g; // eslint-disable-line no-control-regex\nvar charsMap = exports.charsMap = {\n  '\\0': '\\\\0',\n  '\\b': '\\\\b',\n  '\\t': '\\\\t',\n  '\\n': '\\\\n',\n  '\\r': '\\\\r',\n  '\\x1a': '\\\\Z',\n  '\"': '\\\\\"',\n  '\\'': '\\\\\\'',\n  '\\\\': '\\\\\\\\'\n};\n\nfunction wrapEscape(escapeFn) {\n  return function finalEscape(val) {\n    var ctx = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];\n\n    return escapeFn(val, finalEscape, ctx);\n  };\n}\n\nfunction makeEscape() {\n  var config = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];\n\n  var finalEscapeDate = config.escapeDate || dateToString;\n  var finalEscapeArray = config.escapeArray || arrayToList;\n  var finalEscapeBuffer = config.escapeBuffer || bufferToString;\n  var finalEscapeString = config.escapeString || escapeString;\n  var finalEscapeObject = config.escapeObject || escapeObject;\n  var finalWrap = config.wrap || wrapEscape;\n\n  function escapeFn(val, finalEscape, ctx) {\n    if (val === undefined || val === null) {\n      return 'NULL';\n    }\n    switch (typeof val === 'undefined' ? 'undefined' : (0, _typeof3.default)(val)) {\n      case 'boolean':\n        return val ? 'true' : 'false';\n      case 'number':\n        return val + '';\n      case 'object':\n        if (val instanceof Date) {\n          val = finalEscapeDate(val, finalEscape, ctx);\n        } else if (Array.isArray(val)) {\n          return finalEscapeArray(val, finalEscape, ctx);\n        } else if (Buffer.isBuffer(val)) {\n          return finalEscapeBuffer(val, finalEscape, ctx);\n        } else {\n          return finalEscapeObject(val, finalEscape, ctx);\n        }\n    }\n    return finalEscapeString(val, finalEscape, ctx);\n  }\n\n  return finalWrap ? finalWrap(escapeFn) : escapeFn;\n}\n\nfunction escapeObject(val, finalEscape, ctx) {\n  if (typeof val.toSQL === 'function') {\n    return val.toSQL(ctx);\n  } else {\n    return (0, _stringify2.default)(val);\n  }\n}\n\nfunction arrayToList(array, finalEscape, ctx) {\n  var sql = '';\n  for (var i = 0; i < array.length; i++) {\n    var val = array[i];\n    if (Array.isArray(val)) {\n      sql += (i === 0 ? '' : ', ') + '(' + arrayToList(val, finalEscape, ctx) + ')';\n    } else {\n      sql += (i === 0 ? '' : ', ') + finalEscape(val, ctx);\n    }\n  }\n  return sql;\n}\n\nfunction bufferToString(buffer) {\n  return \"X\" + escapeString(buffer.toString('hex'));\n}\n\nfunction escapeString(val, finalEscape, ctx) {\n  var chunkIndex = charsRegex.lastIndex = 0;\n  var escapedVal = '';\n  var match;\n\n  while (match = charsRegex.exec(val)) {\n    escapedVal += val.slice(chunkIndex, match.index) + charsMap[match[0]];\n    chunkIndex = charsRegex.lastIndex;\n  }\n\n  if (chunkIndex === 0) {\n    // Nothing was escaped\n    return \"'\" + val + \"'\";\n  }\n\n  if (chunkIndex < val.length) {\n    return \"'\" + escapedVal + val.slice(chunkIndex) + \"'\";\n  }\n\n  return \"'\" + escapedVal + \"'\";\n}\n\nfunction dateToString(date, finalEscape, ctx) {\n  var timeZone = ctx.timeZone || 'local';\n\n  var dt = new Date(date);\n  var year;\n  var month;\n  var day;\n  var hour;\n  var minute;\n  var second;\n  var millisecond;\n\n  if (timeZone === 'local') {\n    year = dt.getFullYear();\n    month = dt.getMonth() + 1;\n    day = dt.getDate();\n    hour = dt.getHours();\n    minute = dt.getMinutes();\n    second = dt.getSeconds();\n    millisecond = dt.getMilliseconds();\n  } else {\n    var tz = convertTimezone(timeZone);\n\n    if (tz !== false && tz !== 0) {\n      dt.setTime(dt.getTime() + tz * 60000);\n    }\n\n    year = dt.getUTCFullYear();\n    month = dt.getUTCMonth() + 1;\n    day = dt.getUTCDate();\n    hour = dt.getUTCHours();\n    minute = dt.getUTCMinutes();\n    second = dt.getUTCSeconds();\n    millisecond = dt.getUTCMilliseconds();\n  }\n\n  // YYYY-MM-DD HH:mm:ss.mmm\n  return zeroPad(year, 4) + '-' + zeroPad(month, 2) + '-' + zeroPad(day, 2) + ' ' + zeroPad(hour, 2) + ':' + zeroPad(minute, 2) + ':' + zeroPad(second, 2) + '.' + zeroPad(millisecond, 3);\n}\n\nfunction zeroPad(number, length) {\n  number = number.toString();\n  while (number.length < length) {\n    number = '0' + number;\n  }\n  return number;\n}\n\nfunction convertTimezone(tz) {\n  if (tz === 'Z') {\n    return 0;\n  }\n  var m = tz.match(/([\\+\\-\\s])(\\d\\d):?(\\d\\d)?/);\n  if (m) {\n    return (m[1] == '-' ? -1 : 1) * (parseInt(m[2], 10) + (m[3] ? parseInt(m[3], 10) : 0) / 60) * 60;\n  }\n  return false;\n}","/home/travis/build/npmtest/node-npmtest-knex/knex/lib/util/parse-connection.js":"'use strict';\n\nexports.__esModule = true;\nexports.default = parseConnectionString;\n\nvar _url = require('url');\n\nvar _url2 = _interopRequireDefault(_url);\n\nvar _pgConnectionString = require('pg-connection-string');\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction parseConnectionString(str) {\n  var parsed = _url2.default.parse(str);\n  var protocol = parsed.protocol;\n\n  if (protocol && protocol.indexOf('maria') === 0) {\n    protocol = 'maria';\n  }\n  if (protocol === null) {\n    return {\n      client: 'sqlite3',\n      connection: {\n        filename: str\n      }\n    };\n  }\n  if (protocol.slice(-1) === ':') {\n    protocol = protocol.slice(0, -1);\n  }\n  return {\n    client: protocol,\n    connection: protocol === 'postgres' ? (0, _pgConnectionString.parse)(str) : connectionObject(parsed)\n  };\n}\n\nfunction connectionObject(parsed) {\n  var connection = {};\n  var db = parsed.pathname;\n  if (db[0] === '/') {\n    db = db.slice(1);\n  }\n  if (parsed.protocol.indexOf('maria') === 0) {\n    connection.db = db;\n  } else {\n    connection.database = db;\n  }\n  if (parsed.hostname) {\n    if (parsed.protocol.indexOf('mssql') === 0) {\n      connection.server = parsed.hostname;\n    } else {\n      connection.host = parsed.hostname;\n    }\n  }\n  if (parsed.port) {\n    connection.port = parsed.port;\n  }\n  if (parsed.auth) {\n    var idx = parsed.auth.indexOf(':');\n    if (idx !== -1) {\n      connection.user = parsed.auth.slice(0, idx);\n      if (idx < parsed.auth.length - 1) {\n        connection.password = parsed.auth.slice(idx + 1);\n      }\n    } else {\n      connection.user = parsed.auth;\n    }\n  }\n  return connection;\n}\nmodule.exports = exports['default'];"}